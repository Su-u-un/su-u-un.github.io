<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ios上telegram miniapp中声音播放延迟</title>
      <link href="/2024/12/30/tg-ios/"/>
      <url>/2024/12/30/tg-ios/</url>
      
        <content type="html"><![CDATA[<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>在开发tg miniapp的时候，有一个场景如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.点击播放声音</span><br><span class="line">2.连续点击，需要重复地从头再次播放。（比如声音是‘噔-噔-咚’，快速连续点击就响起‘噔-噔-噔’）</span><br></pre></td></tr></table></figure><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>这边给元素绑定了点击事件，当用户触发点击事件，就将音频的当前进度设置为0，并且播放。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">audio.currentTime=0;</span><br><span class="line">audio.play();</span><br></pre></td></tr></table></figure><h3 id="适配情况"><a href="#适配情况" class="headerlink" title="适配情况"></a>适配情况</h3><p>这个代码在pc的chrome和android的浏览器中都可以正常实现需求。</p><p>但是ios中，会出现声音的延迟（比如声音是‘噔-噔-咚’，快速连续点击就响起‘——噔-噔-咚’，稍慢连续点击就响起‘–噔–噔–噔’）</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>调用howler库<br><img src="/images/tg-ios/img1.png"></p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> telegram </tag>
            
            <tag> ios </tag>
            
            <tag> tgminiapp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于tg机器人和tg小程序</title>
      <link href="/2024/12/18/tgbot-tgminiapp/"/>
      <url>/2024/12/18/tgbot-tgminiapp/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>tg应用开发分为机器人和小程序两部分</p><h3 id="tg-bot"><a href="#tg-bot" class="headerlink" title="tg-bot"></a>tg-bot</h3><p>首先要在telegram的<code>BotFather</code>申请创建机器人，直接输入<code>/newbot</code>按照命令一步一步来就可以了。</p><p>成功后你会获得一串HTTP API，这个要保存下来。后续编程开发需要使用。</p><h3 id="tgbot程序编写"><a href="#tgbot程序编写" class="headerlink" title="tgbot程序编写"></a>tgbot程序编写</h3><blockquote><p>bot部分参考了<a href="%22https://lengmo714.top/78a7bf41.html%22">这位的博客</a></p></blockquote><p>技术栈：grammY+node直接启动。以下是具体代码。</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">const &#123; Bot, InlineKeyboard &#125; = require(&#x27;grammy&#x27;)</span><br><span class="line"></span><br><span class="line">const TOKEN = &#x27;&#x27;;  // bot机器人的token</span><br><span class="line"></span><br><span class="line">const bot = new Bot(TOKEN);</span><br><span class="line"></span><br><span class="line">const app_url=&#x27;&#x27; // tg小程序在tg内的url</span><br><span class="line"></span><br><span class="line">// 内联键盘，包含游戏按钮和访问网站按钮</span><br><span class="line">const keyboard = new InlineKeyboard()</span><br><span class="line">  .url(&quot;开始游戏&quot;,app_url).row()</span><br><span class="line"></span><br><span class="line">// 设置左侧目录按钮打开网页，这个功能就是让对话框左侧的菜单按钮变成打开网页的按钮</span><br><span class="line">bot.api.setChatMenuButton(&#123;</span><br><span class="line">  menu_button: &#123;</span><br><span class="line">    type: &quot;web_app&quot;,</span><br><span class="line">    text: &quot;Play&quot;,</span><br><span class="line">    web_app: &#123;</span><br><span class="line">      url: &quot;&quot; // 前端域名</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 设置小程序快捷命令</span><br><span class="line">bot.api.setMyCommands([</span><br><span class="line">  &#123; command: &quot;start&quot;, description: &quot;Start the bot&quot; &#125;,</span><br><span class="line">  &#123; command: &quot;info&quot;, description: &quot;Get user info&quot; &#125;,</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">// 处理/start命令</span><br><span class="line">bot.command(&quot;start&quot;, async (ctx) =&gt; &#123;</span><br><span class="line">  const gifUrl = &quot;https://media.giphy.com/media/JIX9t2j0ZTN9S/giphy.gif&quot;;</span><br><span class="line">  const caption = `Hi $&#123;ctx.update.message.from.first_name&#125;!\n\n这有一款很好玩的小游戏`;</span><br><span class="line"></span><br><span class="line">  await ctx.replyWithAnimation(gifUrl, &#123;</span><br><span class="line">    caption: caption,</span><br><span class="line">    reply_markup: keyboard,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 处理 /info 命令</span><br><span class="line">bot.command(&quot;info&quot;, async (ctx) =&gt; &#123;</span><br><span class="line">  const firstName = ctx.update.message.from.first_name;</span><br><span class="line">  const userId = ctx.from.id;</span><br><span class="line"></span><br><span class="line">  // 初始化头像URL为空字符串</span><br><span class="line">  let photoUrl = &#x27;&#x27;;</span><br><span class="line"></span><br><span class="line">  try &#123;</span><br><span class="line">    // 获取用户头像信息</span><br><span class="line">    const profilePhotos = await bot.api.getUserProfilePhotos(userId, &#123; limit: 1 &#125;);</span><br><span class="line"></span><br><span class="line">    if (profilePhotos.total_count &gt; 0) &#123;</span><br><span class="line">      const fileId = profilePhotos.photos[0][0].file_id;</span><br><span class="line">      const file = await bot.api.getFile(fileId);</span><br><span class="line">      photoUrl = `https://api.telegram.org/file/bot$&#123;TOKEN&#125;/$&#123;file.file_path&#125;`;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; catch (error) &#123;</span><br><span class="line">    console.error(&quot;获取头像失败: &quot;, error);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 获取用户登录信息</span><br><span class="line">  let userInfo = &#x27;&#x27;;</span><br><span class="line">  let id = &quot;&quot;;</span><br><span class="line">  let name = &quot;&quot;;</span><br><span class="line">  try &#123;</span><br><span class="line">    const chatMember = await bot.api.getChatMember(ctx.chat.id, userId);</span><br><span class="line">    id = chatMember.user.id;</span><br><span class="line">    name = chatMember.user.first_name;</span><br><span class="line">    userInfo = `用户信息:\nID: $&#123;chatMember.user.id&#125;\n名字: $&#123;chatMember.user.first_name&#125;\n用户名: $&#123;chatMember.user.username&#125;\n状态: $&#123;chatMember.status&#125;`;</span><br><span class="line">  &#125; catch (error) &#123;</span><br><span class="line">    console.error(&quot;获取用户信息失败: &quot;, error);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if (photoUrl) &#123;</span><br><span class="line">    await ctx.reply(`头像链接: $&#123;photoUrl&#125;`);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    await ctx.reply(&quot;未能获取你的头像。&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  await ctx.reply(userInfo || &quot;未能获取你的用户信息。&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 启动机器人</span><br><span class="line">bot.start();</span><br></pre></td></tr></table></figure><p>这里面注意的就是api这个类，可以参照着tg的官方文档，找到自己需要的method名，通过method名找到grammY库的案例（或者直接在搜索引擎搜索这个method，也可以找到参数）</p><h2 id="tg小程序"><a href="#tg小程序" class="headerlink" title="tg小程序"></a>tg小程序</h2><p>tg小程序就是在tg内置的浏览器打开你指定链接的网站。</p><h3 id="获取tg信息"><a href="#获取tg信息" class="headerlink" title="获取tg信息"></a>获取tg信息</h3><p>然后我们在网站内一般会有获取tg用户信息之类的操作，直接引入<code>&lt;script src=&quot;https://telegram.org/js/telegram-web-app.js&quot;&gt;&lt;/script&gt;</code>这个脚本</p><p>然后在前端项目中，通过<code>window.Telegram.WebApp.xxx</code>去调用需要的方法。具体可以参考<span class="exturl" data-url="aHR0cHM6Ly93d3cuamFja3lndS5tZS9wb3N0cy9hLXRlbGVncmFtLW1pbmktYXBwLw==">这篇博客<i class="fa fa-external-link-alt"></i></span>，他对tg小程序的文档作了翻译。</p><h3 id="小程序ui"><a href="#小程序ui" class="headerlink" title="小程序ui"></a>小程序ui</h3><p>这里采用<code>@telegram-apps/sdk</code>这个包，可以自行去检索一下，他还有很多相关的包例如对react和vue的适配的包。</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> telegram </tag>
            
            <tag> tgminiapp </tag>
            
            <tag> tgbot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nestjs+vue3前后端项目并配置ssl(nest打包与nginx篇)</title>
      <link href="/2024/12/16/vue3-nest/2/"/>
      <url>/2024/12/16/vue3-nest/2/</url>
      
        <content type="html"><![CDATA[<p>本文使用的技术栈: Vue3+Vite+Axios+Pinia、Nestjs+Typeorm+mysql2</p><p>本篇记录nestjs打包和nginx操作</p><span id="more"></span><h2 id="nest"><a href="#nest" class="headerlink" title="nest"></a>nest</h2><h3 id="nest打包依赖问题"><a href="#nest打包依赖问题" class="headerlink" title="nest打包依赖问题"></a>nest打包依赖问题</h3><p>正常情况下，前端打包后的&#x2F;dist文件夹是可以直接通过node启动的，但是nestjs不会把依赖打包。</p><p>所以nest项目最好是git pull拉取项目，然后在服务器安装依赖并打包。</p><h3 id="nest打包环境变量问题"><a href="#nest打包环境变量问题" class="headerlink" title="nest打包环境变量问题"></a>nest打包环境变量问题</h3><p>如果在nest中通过了ConfigModule使用.env，需要把.env放到打包后的&#x2F;dist中，否则无法找到环境变量</p><h3 id="pm2启动nest静态文件问题"><a href="#pm2启动nest静态文件问题" class="headerlink" title="pm2启动nest静态文件问题"></a>pm2启动nest静态文件问题</h3><p>目录简略结构如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">my-project/</span><br><span class="line">├── dist/</span><br><span class="line">│   ├── users/              # 项目的表</span><br><span class="line">│   ├── ...                 # 其余文件</span><br><span class="line">│   └── main.js             # 项目的启动文件</span><br><span class="line">├── node_module/</span><br><span class="line">│   ├── ...                 # 依赖包</span><br><span class="line">|   └── ...                 # 依赖包</span><br><span class="line">├── src/</span><br><span class="line">│   ├── users/              # 项目的表</span><br><span class="line">│   ├── utils/              # 工具</span><br><span class="line">│   ├── app.module.ts       # app模块</span><br><span class="line">│   └── main.ts             # 入口文件</span><br><span class="line">├── .env                    # 环境变量</span><br><span class="line">├── ...                     # 其他文件</span><br><span class="line">├── .gitignore              # Git 忽略文件</span><br><span class="line">├── package.json            # 项目配置文件</span><br><span class="line">└── README.md               # 项目说明文件</span><br></pre></td></tr></table></figure><p>我在my-project&#x2F;src下运行<code>sudo pm2 start ../dist/main.js</code>命令，发现有报错。</p><p>打印出来发现，报错居然出现在main.ts。</p><p>尝试重启、删除再启动都无效。</p><p>后面进入&#x2F;dist使用<code>sudo pm2 start ./main.js</code>才成功启动了main.js</p><h2 id="ssl"><a href="#ssl" class="headerlink" title="ssl"></a>ssl</h2><h3 id="前端ssl"><a href="#前端ssl" class="headerlink" title="前端ssl"></a>前端ssl</h3><blockquote><p>ps:不建议用node启动express重定向<code>/</code>到<code>/index.html</code>，这样会导致网页刷新后404</p></blockquote><p>服务器配置nginx后，在nginx.conf内进行如下配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">  server &#123;</span><br><span class="line">      listen 443 ssl;</span><br><span class="line"></span><br><span class="line">      server_name 你的域名;</span><br><span class="line"></span><br><span class="line">      ssl_certificate 你的证书;</span><br><span class="line">      ssl_certificate_key 你的密钥;</span><br><span class="line"></span><br><span class="line">      ssl_session_cache shared:SSL:1m;</span><br><span class="line">      ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">      ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">      ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;</span><br><span class="line"></span><br><span class="line">      ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">      location / &#123;</span><br><span class="line">          root 你的html文件所在的目录;</span><br><span class="line">          index index.html index.htm;</span><br><span class="line">          try_files $uri $uri/ /index.html;</span><br><span class="line">      &#125;</span><br><span class="line">      location /api/ &#123;</span><br><span class="line">          proxy_pass 转发后端接口;</span><br><span class="line">          proxy_set_header Host $host;</span><br><span class="line">          proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">          proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ssl_certificate用cer或者crt文件都可以</p><p>ssl_certificate_key就是key文件</p><h3 id="后端ssl问题"><a href="#后端ssl问题" class="headerlink" title="后端ssl问题"></a>后端ssl问题</h3><p>当前端配置了ssl后，https向http的后端发起请求会出错。如下图<img src="/../images/nest/2.png"></p><p>现在就有两种解决办法，我个人总感觉第二种不太好，但是没做过后端，不清楚第二种合不合适。</p><h4 id="一、nginx转发"><a href="#一、nginx转发" class="headerlink" title="一、nginx转发"></a>一、nginx转发</h4><p>我的后端在服务器的3000端口挂着，所以我在nginx里面，对本机的3000端口进行转发，路径设置的<code>/api/</code>，也就是上面nginx配置中的<code>location /api/</code></p><h4 id="二、把ssl也给nest装上"><a href="#二、把ssl也给nest装上" class="headerlink" title="二、把ssl也给nest装上"></a>二、把ssl也给nest装上</h4><ol><li>进入nest的main.ts</li><li>定义一个对象，并导入key和cert</li><li>将对象放进nest的工厂函数，全部代码如下<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># main.ts</span><br><span class="line"></span><br><span class="line">const httpsOptions = &#123;</span><br><span class="line">  key: fs.readFileSync(&#x27;密钥&#x27;),</span><br><span class="line">  cert: fs.readFileSync(&#x27;证书&#x27;),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">async function bootstrap() &#123;</span><br><span class="line">  const app = await NestFactory.create(AppModule, httpsOptions);</span><br><span class="line">  app.enableCors();</span><br><span class="line">  await app.listen(process.env.PORT ?? 3000);</span><br><span class="line">&#125;</span><br><span class="line">bootstrap();</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h4 id="三、再买个ssl"><a href="#三、再买个ssl" class="headerlink" title="三、再买个ssl"></a>三、再买个ssl</h4>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> nginx </tag>
            
            <tag> Nestjs </tag>
            
            <tag> https </tag>
            
            <tag> ssl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nestjs+vue3前后端项目并配置ssl(nest与mysql篇)</title>
      <link href="/2024/12/15/vue3-nest/1/"/>
      <url>/2024/12/15/vue3-nest/1/</url>
      
        <content type="html"><![CDATA[<p>本文使用的技术栈: Vue3+Vite+Axios+Pinia、Nestjs+Typeorm+mysql2</p><p>本篇记录nestjs连接mysql操作</p><span id="more"></span><h2 id="生成nest项目"><a href="#生成nest项目" class="headerlink" title="生成nest项目"></a>生成nest项目</h2><p>首先输入以下命令生成nest项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 全局安装脚手架</span><br><span class="line">npm i -g @nestjs/cli</span><br><span class="line"># 生成项目</span><br><span class="line">nest new project-name</span><br><span class="line"># 进入项目根目录</span><br><span class="line">cd project-name</span><br><span class="line"># 安装依赖(我在生成项目时选择的npm包管理)</span><br><span class="line">npm i</span><br></pre></td></tr></table></figure><p><img src="/../images/nest/1.png"><br>此时我的项目结构如图所示，其中的.spec.ts后缀和&#x2F;test文件夹是测试用的，我直接删除了。<br><img src="/../images/nest/image.png"></p><h2 id="配置mysql"><a href="#配置mysql" class="headerlink" title="配置mysql"></a>配置mysql</h2><ol><li>安装所需要的插件<code>npm i mysql2 typeorm</code></li><li>进入<code>app.module.ts</code>文件内，进行数据库的配置<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># app.module.ts</span><br><span class="line"></span><br><span class="line">import &#123; Module &#125; from &#x27;@nestjs/common&#x27;;</span><br><span class="line">import &#123; TypeOrmModule &#125; from &#x27;@nestjs/typeorm&#x27;;</span><br><span class="line"></span><br><span class="line">import &#123; UsersModule &#125; from &#x27;./users/users.module&#x27;;</span><br><span class="line"></span><br><span class="line">@Module(&#123;</span><br><span class="line">  imports: [</span><br><span class="line">    TypeOrmModule.forRoot(&#123;</span><br><span class="line">      type: &#x27;mysql&#x27;,</span><br><span class="line">      host: &#x27;your_host&#x27;,</span><br><span class="line">      port: &#x27;your_port&#x27;,</span><br><span class="line">      username: &#x27;your_username&#x27;,</span><br><span class="line">      password: &#x27;your_pwd&#x27;,</span><br><span class="line">      database: &#x27;your_database_name&#x27;,</span><br><span class="line">      autoLoadEntities: true,</span><br><span class="line">      synchronize: true,</span><br><span class="line">    &#125;),</span><br><span class="line">    UsersModule,</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line">export class AppModule &#123;&#125;</span><br></pre></td></tr></table></figure><code>UsersModule</code>是数据库内表的模块，要在appmodule引入，app模块不需要用到控制器和服务，所以直接去除了原有的controller和service。<br>typeorm内的<code>autoLoadEntities</code>是自动加载实体，<code>synchronize</code>是根据实体自动创建数据库表， 如果是生产环境建议关闭。</li></ol><h2 id="操作mysql"><a href="#操作mysql" class="headerlink" title="操作mysql"></a>操作mysql</h2><h3 id="新建表"><a href="#新建表" class="headerlink" title="新建表"></a>新建表</h3><ol><li>创建users文件夹<br>在users文件夹内新建以下文件<code>users.module.ts users.controller.ts users.service.ts user.entity.ts</code><br>其中<code>users.module.ts</code>是管理控制器和服务的，并且要把entity这个users实体导入<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"># users.module.ts</span><br><span class="line">import &#123; Module &#125; from &#x27;@nestjs/common&#x27;;</span><br><span class="line">import &#123; TypeOrmModule &#125; from &#x27;@nestjs/typeorm&#x27;;</span><br><span class="line">import &#123; User &#125; from &#x27;./user.entity&#x27;;</span><br><span class="line">import &#123; UsersController &#125; from &#x27;./users.controller&#x27;;</span><br><span class="line">import &#123; UsersService &#125; from &#x27;./users.service&#x27;;</span><br><span class="line"></span><br><span class="line">@Module(&#123;</span><br><span class="line">  imports: [TypeOrmModule.forFeature([User])],</span><br><span class="line">  providers: [UsersService],</span><br><span class="line">  controllers: [UsersController],</span><br><span class="line">&#125;)</span><br><span class="line">export class UsersModule &#123;&#125;</span><br><span class="line"></span><br><span class="line">--------------------------------------------------</span><br><span class="line"># users.controller.ts</span><br><span class="line">import &#123;</span><br><span class="line">  Query,</span><br><span class="line">  Controller,</span><br><span class="line">  Get,</span><br><span class="line">  Response</span><br><span class="line">&#125; from &#x27;@nestjs/common&#x27;;</span><br><span class="line">import &#123; UsersService &#125; from &#x27;./users.service&#x27;;</span><br><span class="line"></span><br><span class="line">@Controller(&#x27;&#x27;)</span><br><span class="line">export class UsersController &#123;</span><br><span class="line">  constructor(private readonly usersService: UsersService) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  @Get(&#x27;getUser&#x27;)</span><br><span class="line">  user(@Query() data: any, @Response() res:any): any &#123;</span><br><span class="line">    this.usersService.getUser(data.id).then((r) =&gt; &#123;</span><br><span class="line">      return res.send(&#123;</span><br><span class="line">        code: 200,</span><br><span class="line">        data: &#123;id:data.id&#125;,</span><br><span class="line">        message: &#x27;success&#x27;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------</span><br><span class="line"># users.service.ts</span><br><span class="line">import &#123; Injectable &#125; from &#x27;@nestjs/common&#x27;;</span><br><span class="line">import &#123; InjectRepository &#125; from &#x27;@nestjs/typeorm&#x27;;</span><br><span class="line">import &#123; Repository &#125; from &#x27;typeorm&#x27;;</span><br><span class="line">import &#123; User &#125; from &#x27;./user.entity&#x27;;</span><br><span class="line"></span><br><span class="line">@Injectable()</span><br><span class="line">export class UsersService &#123;</span><br><span class="line"></span><br><span class="line">  constructor(</span><br><span class="line">    @InjectRepository(User)</span><br><span class="line">    private readonly usersRepository: Repository&lt;User&gt;,</span><br><span class="line">  ) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  async getUser(id:string): Promise&lt;User[]&gt; &#123;</span><br><span class="line">    return this.usersRepository.query(`select * from user where id=$&#123;id&#125;`);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>大体上和koa、express一样。在typeorm有提供sdk直接进行增删改查，我直接自定义sql语句没有使用，有兴趣可以去官网查看。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> nginx </tag>
            
            <tag> Nestjs </tag>
            
            <tag> https </tag>
            
            <tag> ssl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建hexo博客指南</title>
      <link href="/2024/11/05/hexo/"/>
      <url>/2024/11/05/hexo/</url>
      
        <content type="html"><![CDATA[<p>搭建个人博客的初衷，是为了不再受制于博客平台(cs*n)，同时还要能专注于博客的编写而不用费心思去处理编译部署打包。（要抄配置直接拉到文章底部，我把配置文件放那了）</p><p>这里使用的是<span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvLw==">hexo博客框架<i class="fa fa-external-link-alt"></i></span>和<span class="exturl" data-url="aHR0cHM6Ly90aGVtZS1uZXh0Lm9yZy8=">next主题<i class="fa fa-external-link-alt"></i></span>，用到的依赖如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&quot;hexo&quot;: &quot;^7.3.0&quot;,</span><br><span class="line">&quot;hexo-deployer-git&quot;: &quot;^4.0.0&quot;,</span><br><span class="line">&quot;hexo-generator-archive&quot;: &quot;^2.0.0&quot;,</span><br><span class="line">&quot;hexo-generator-category&quot;: &quot;^2.0.0&quot;,</span><br><span class="line">&quot;hexo-generator-index&quot;: &quot;^4.0.0&quot;,</span><br><span class="line">&quot;hexo-generator-search&quot;: &quot;^2.4.3&quot;,</span><br><span class="line">&quot;hexo-generator-seo-friendly-sitemap&quot;: &quot;^0.2.1&quot;,</span><br><span class="line">&quot;hexo-generator-tag&quot;: &quot;^2.0.0&quot;,</span><br><span class="line">&quot;hexo-reading-time&quot;: &quot;^1.0.3&quot;,</span><br><span class="line">&quot;hexo-renderer-ejs&quot;: &quot;^2.0.0&quot;,</span><br><span class="line">&quot;hexo-renderer-marked&quot;: &quot;^6.3.0&quot;,</span><br><span class="line">&quot;hexo-renderer-stylus&quot;: &quot;^3.0.1&quot;,</span><br><span class="line">&quot;hexo-server&quot;: &quot;^3.0.0&quot;,</span><br><span class="line">&quot;hexo-theme-landscape&quot;: &quot;^1.0.0&quot;,</span><br><span class="line">&quot;hexo-theme-next&quot;: &quot;^8.21.0&quot;,</span><br><span class="line">&quot;hexo-word-counter&quot;: &quot;^0.2.0&quot;</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="前置准备工作"><a href="#前置准备工作" class="headerlink" title="前置准备工作"></a>前置准备工作</h2><p>创建两个仓库，这里创建两个仓库是为了通过<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmdpdGh1Yi5jb20vZW4vYWN0aW9ucw==">GitHub action<i class="fa fa-external-link-alt"></i></span>实现自动化部署到<span class="exturl" data-url="aHR0cHM6Ly9wYWdlcy5naXRodWIuY29tLw==">GitHub page<i class="fa fa-external-link-alt"></i></span>，如果没有这个需求的话，只需要创建一个仓库。</p><ul><li>一个是<a href="https://pages.github.com/"><strong>GitHub page</strong></a>用来放生成的静态文件，</li></ul><p><img src="/../images/hexo/img.png"></p><ul><li>一个是用来放<strong>项目源代码</strong>的仓库。</li></ul><p><img src="/../images/hexo/img2.png"></p><p>创建这两个仓库之后就可以开始搭建博客了。</p><h2 id="hexo生成"><a href="#hexo生成" class="headerlink" title="hexo生成"></a>hexo生成</h2><ol><li><code>npm i hexo-cli -g</code>安装hexo命令行（这里注意啊，你安装的hexo命令行是在这个版本的node，要是nvm切换了版本就没了，需要在当前版本再安装一个或者切回这个安装的版本）</li><li>进入你要放这个项目文件夹的目录<code>hexo init 博客名</code>生成hexo项目文件夹</li><li>打开项目，<code>npm i</code>下载依赖</li><li><code>hexo s</code>跑一下项目，命令行出现如下说明成功，这时候进入对应链接就可以看到博客了<br><img src="/../images/hexo/img3.png"></li></ol><h2 id="博客配置（-config-yml文件）"><a href="#博客配置（-config-yml文件）" class="headerlink" title="博客配置（_config.yml文件）"></a>博客配置（_config.yml文件）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: xxx的博客</span><br><span class="line">subtitle: &#x27;&#x27;</span><br><span class="line">description: &#x27;&#x27;</span><br><span class="line">keywords:</span><br><span class="line">author: &#x27;xxx&#x27;</span><br><span class="line">language: zh-CN</span><br><span class="line">timezone: &#x27;Asia/Shanghai&#x27;</span><br></pre></td></tr></table></figure><h2 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h2><p>这里用的是<span class="exturl" data-url="aHR0cHM6Ly90aGVtZS1uZXh0Lm9yZy8=">next主题<i class="fa fa-external-link-alt"></i></span></p><ol><li><code>git clone https://github.com/theme-next/hexo-theme-next themes/next</code>安装next主题</li><li>在项目根目录的<code>_config.yml</code>文件内，设置theme: next</li><li><code>hexo s</code>发现页面如下说明修改完成<br><img src="/../images/hexo/img4.png"></li><li>next有四种主题方案Muse、Mist、Pisces、Gemini，本站使用的是Gemini主题，可以在项目根目录的<code>_config.next.yml</code>文件（没有就自己创建）内，设置scheme: xxx</li></ol><h2 id="hexo使用"><a href="#hexo使用" class="headerlink" title="hexo使用"></a>hexo使用</h2><ol><li>博客的编写在&#x2F;source&#x2F;_posts&#x2F;路径下创建<code>.md</code>文件，hexo会自动编译每一个<code>.md</code>文件生成对应博客</li><li>如果想让文章只显示一部分（出现阅读全文按钮），可以在博客中加入一行<code>&lt;!--more--&gt;</code>，这样就把这行代码后的文字隐藏</li><li>文章的标题和日期等信息，代码如下<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章标题</span><br><span class="line">date: 日期</span><br><span class="line">update: 更新时间</span><br><span class="line">categories:</span><br><span class="line">  - 分类文件夹</span><br><span class="line">tags:</span><br><span class="line">  - tag1</span><br><span class="line">  - tag2</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li><li>关于第3点里的分类和tags需要在项目根目录的<code>_config.next.yml</code>文件中加入以下代码，并且在&#x2F;source&#x2F;路径新增&#x2F;tags&#x2F;index.md<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || fa fa-home</span><br><span class="line">  about: /about/ || fa fa-user</span><br><span class="line">  tags: /tags/ || fa fa-tags</span><br><span class="line">  archives: /archives/ || fa fa-archive</span><br></pre></td></tr></table></figure></li></ol><h2 id="配置自动化"><a href="#配置自动化" class="headerlink" title="配置自动化"></a>配置自动化</h2><p>在&#x2F;.github路径创建&#x2F;workflows&#x2F;deploy.yml，这个文件是写action的。我的action如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">name: Blog Build</span><br><span class="line"></span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches:</span><br><span class="line">      - main</span><br><span class="line">      - dev</span><br><span class="line">  pull_request:</span><br><span class="line">    branches:</span><br><span class="line">      - main</span><br><span class="line">      - dev</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  build-and-deploy:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    steps:</span><br><span class="line">    - name: Checkout</span><br><span class="line">      uses: actions/checkout@v4</span><br><span class="line"></span><br><span class="line">    - name: Use Node.js 18</span><br><span class="line">      uses: actions/setup-node@v4</span><br><span class="line">      with:</span><br><span class="line">        node-version: 18</span><br><span class="line">    </span><br><span class="line">    - name: clone themes</span><br><span class="line">      run: git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br><span class="line"></span><br><span class="line">    - name: Build and Deploy</span><br><span class="line">      uses: theme-keep/hexo-deploy-github-pages-action@master</span><br><span class="line">      env:</span><br><span class="line">        PERSONAL_TOKEN: $&#123;&#123; secrets.SSH_PRIVATE_KEY &#125;&#125; # secret 名</span><br><span class="line">        PUBLISH_REPOSITORY: Su-u-un/Su-u-un.github.io # gtihub page仓库，格式：GitHub 用户名/仓库名</span><br><span class="line">        BRANCH: main # 分支，填部署的分支就行</span><br><span class="line">        PUBLISH_DIR: ./public # 部署 public 目录下的文件</span><br></pre></td></tr></table></figure><p>其中有个PERSONAL_TOKEN需要去GitHub设置<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NldHRpbmdzL3Rva2Vucw==">点此前往<i class="fa fa-external-link-alt"></i></span></p><ol><li>步骤：点击Github右上角头像，逐步点击<code>Settings</code>-<code>Developer Settings</code>-<code>Personal access tokens</code>-<code>Tokens(classic)</code>，如下图点击<br><img src="/../images/hexo/img5.png"></li><li>点击后进入页面，如下图设置。滑动到页面底部点击生成，复制好生成的token<br><img src="/../images/hexo/img6.png"></li><li>步骤：进入项目源代码的仓库，逐步点击<code>Settings</code>-<code>Secrets and variables</code>-<code>Actions</code>，如下图所示<br><img src="/../images/hexo/img7.png"></li><li>完成第3步后，创建secret，这里的<code>Name</code>是写在action文件用的，<code>Secret</code>是第2步创建的token<br><img src="/../images/hexo/img8.png"></li><li>完成以上步骤，当项目源代码仓库发生推送操作，他就会自动更新并且部署到github page的那个仓库</li></ol><h2 id="项目源代码"><a href="#项目源代码" class="headerlink" title="项目源代码"></a>项目源代码</h2><ul><li><p>action文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">name: Blog Build</span><br><span class="line"></span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches:</span><br><span class="line">      - main</span><br><span class="line">      - dev</span><br><span class="line">  pull_request:</span><br><span class="line">    branches:</span><br><span class="line">      - main</span><br><span class="line">      - dev</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  build-and-deploy:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    steps:</span><br><span class="line">    - name: Checkout</span><br><span class="line">      uses: actions/checkout@v4</span><br><span class="line"></span><br><span class="line">    - name: Use Node.js 18</span><br><span class="line">      uses: actions/setup-node@v4</span><br><span class="line">      with:</span><br><span class="line">        node-version: 18</span><br><span class="line">    </span><br><span class="line">    - name: clone themes</span><br><span class="line">      run: git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br><span class="line"></span><br><span class="line">    - name: Build and Deploy</span><br><span class="line">      uses: theme-keep/hexo-deploy-github-pages-action@master</span><br><span class="line">      env:</span><br><span class="line">        PERSONAL_TOKEN: $&#123;&#123; secrets.SSH_PRIVATE_KEY &#125;&#125; # secret 名</span><br><span class="line">        PUBLISH_REPOSITORY: Su-u-un/Su-u-un.github.io # 公共仓库，格式：GitHub 用户名/仓库名</span><br><span class="line">        BRANCH: main # github page分支名</span><br><span class="line">        PUBLISH_DIR: ./public # 部署 public 目录下的文件</span><br></pre></td></tr></table></figure></li><li><p><code>_config.next.yml</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br><span class="line">scheme: Gemini</span><br><span class="line"></span><br><span class="line">cache:</span><br><span class="line">  enable: true</span><br><span class="line">minify: true</span><br><span class="line">sidebar:</span><br><span class="line">  position: left</span><br><span class="line">  display: always</span><br><span class="line">favicon:</span><br><span class="line">  small: /images/favicon.png</span><br><span class="line">  medium: /images/favicon.png</span><br><span class="line">social:</span><br><span class="line">  GitHub: https://github.com/Su-u-un || fab fa-github</span><br><span class="line">  E-Mail: mailto:tl071515@gmail.com || fa fa-envelope</span><br><span class="line">social_icons:</span><br><span class="line">  icons_only: true</span><br><span class="line">site_state: true</span><br><span class="line">language: zh-CN</span><br><span class="line">symbols_count_time:</span><br><span class="line">  separated_meta: false</span><br><span class="line">  item_text_total: true</span><br><span class="line">  item_text_post: true</span><br><span class="line">tag_icon: true</span><br><span class="line">post_navigation: left</span><br><span class="line">menu:</span><br><span class="line">  home: / || fa fa-home</span><br><span class="line">  about: /about/ || fa fa-user</span><br><span class="line">  tags: /tags/ || fa fa-tags</span><br><span class="line">  archives: /archives/ || fa fa-archive</span><br><span class="line"></span><br><span class="line">index_with_subtitle: true</span><br><span class="line">exturl: true</span><br><span class="line">exturl_icon: true</span><br></pre></td></tr></table></figure></li><li><p><code>_config.yml</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"># Hexo Configuration</span><br><span class="line">## Docs: https://hexo.io/docs/configuration.html</span><br><span class="line">## Source: https://github.com/hexojs/hexo/</span><br><span class="line"></span><br><span class="line"># Site</span><br><span class="line">title: 苏某的博客</span><br><span class="line">subtitle: &#x27;&#x27;</span><br><span class="line">description: &#x27;这里是苏某&#x27;</span><br><span class="line">keywords:</span><br><span class="line">author: Johnny Su</span><br><span class="line">language: zh-CN</span><br><span class="line">timezone: &#x27;Asia/Shanghai&#x27;</span><br><span class="line"></span><br><span class="line"># URL</span><br><span class="line">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span><br><span class="line">url: https://su-u-un-github-io.vercel.app/</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line">pretty_urls:</span><br><span class="line">  trailing_index: true # Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span><br><span class="line">  trailing_html: true # Set to false to remove trailing &#x27;.html&#x27; from permalinks</span><br><span class="line"></span><br><span class="line"># Directory</span><br><span class="line">source_dir: source</span><br><span class="line">public_dir: public</span><br><span class="line">tag_dir: tags</span><br><span class="line">archive_dir: archives</span><br><span class="line">category_dir: categories</span><br><span class="line">code_dir: downloads/code</span><br><span class="line">i18n_dir: :lang</span><br><span class="line">skip_render:</span><br><span class="line"></span><br><span class="line"># Writing</span><br><span class="line">new_post_name: :title.md # File name of new posts</span><br><span class="line">default_layout: post</span><br><span class="line">titlecase: false # Transform title into titlecase</span><br><span class="line">external_link:</span><br><span class="line">  enable: true # Open external links in new tab</span><br><span class="line">  field: site # Apply to the whole site</span><br><span class="line">  exclude: &#x27;&#x27;</span><br><span class="line">filename_case: 0</span><br><span class="line">render_drafts: false</span><br><span class="line">post_asset_folder: true</span><br><span class="line">relative_link: false</span><br><span class="line">future: true</span><br><span class="line">syntax_highlighter: highlight.js</span><br><span class="line">highlight:</span><br><span class="line">  line_number: true</span><br><span class="line">  auto_detect: false</span><br><span class="line">  tab_replace: &#x27;&#x27;</span><br><span class="line">  wrap: true</span><br><span class="line">  hljs: false</span><br><span class="line">prismjs:</span><br><span class="line">  preprocess: true</span><br><span class="line">  line_number: true</span><br><span class="line">  tab_replace: &#x27;&#x27;</span><br><span class="line"></span><br><span class="line">  symbols_count_time:</span><br><span class="line">  symbols: true</span><br><span class="line">  time: true</span><br><span class="line">  total_symbols: true</span><br><span class="line">  total_time: true</span><br><span class="line">  exclude_codeblock: false</span><br><span class="line">  awl: 4</span><br><span class="line">  wpm: 275</span><br><span class="line">  suffix: &quot;mins.&quot;</span><br><span class="line"></span><br><span class="line"># Home page setting</span><br><span class="line"># path: Root path for your blogs index page. (default = &#x27;&#x27;)</span><br><span class="line"># per_page: Posts displayed per page. (0 = disable pagination)</span><br><span class="line"># order_by: Posts order. (Order by date descending by default)</span><br><span class="line">index_generator:</span><br><span class="line">  path: &#x27;&#x27;</span><br><span class="line">  per_page: 10</span><br><span class="line">  order_by: -date</span><br><span class="line"></span><br><span class="line"># Category &amp; Tag</span><br><span class="line">default_category: uncategorized</span><br><span class="line">category_map:</span><br><span class="line">tag_map:</span><br><span class="line"></span><br><span class="line"># Metadata elements</span><br><span class="line">## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta</span><br><span class="line">meta_generator: true</span><br><span class="line"></span><br><span class="line"># Date / Time format</span><br><span class="line">## Hexo uses Moment.js to parse and display date</span><br><span class="line">## You can customize the date format as defined in</span><br><span class="line">## http://momentjs.com/docs/#/displaying/format/</span><br><span class="line">date_format: YYYY-MM-DD</span><br><span class="line">time_format: HH:mm:ss</span><br><span class="line">## updated_option supports &#x27;mtime&#x27;, &#x27;date&#x27;, &#x27;empty&#x27;</span><br><span class="line">updated_option: &#x27;mtime&#x27;</span><br><span class="line"></span><br><span class="line"># Pagination</span><br><span class="line">## Set per_page to 0 to disable pagination</span><br><span class="line">per_page: 10</span><br><span class="line">pagination_dir: page</span><br><span class="line"></span><br><span class="line"># Include / Exclude file(s)</span><br><span class="line">## include:/exclude: options only apply to the &#x27;source/&#x27; folder</span><br><span class="line">include:</span><br><span class="line">exclude:</span><br><span class="line">ignore:</span><br><span class="line"></span><br><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: next</span><br><span class="line"></span><br><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="line">deploy:</span><br><span class="line">  type: &#x27;&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>storybook使用</title>
      <link href="/2024/08/30/storybook/"/>
      <url>/2024/08/30/storybook/</url>
      
        <content type="html"><![CDATA[<blockquote><p>文中有部分名词可能不准确，见谅</p></blockquote><p>本文主要介绍storybook+shadcn&#x2F;ui+tailwindcss的storybook代码编写。</p><span id="more"></span><p>相关lib版本<br>“storybook”: “^8.2.4”,<br>“tailwindcss”: “^3.4.1”,</p><h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>首先，使用storybook开发一个组件需要两个文件，一个是组件<code>*.tsx</code>一个是story<code>*.stories.ts</code>&#x2F;<code>*.stories.tsx</code>，css使用了tailwind，所以不单独进行css文件的编写。<br>在这里关于story文件<code>*.stories.ts</code>&#x2F;<code>*.stories.tsx</code>，如果有引入组件的需求，请务必使用tsx或者jsx，否则无法识别。</p><h1 id="二、开始"><a href="#二、开始" class="headerlink" title="二、开始"></a>二、开始</h1><p>以开发一个列表为例，此列表的列表项左侧是icon+title，并且支持点击选中和点击事件。<br>分成两个组件开发。一个是<code>&lt;ListItem&gt;</code>，一个是<code>&lt;List&gt;</code>。<br>先看ListItem的开发</p><h3 id="1-ListItem"><a href="#1-ListItem" class="headerlink" title="1.ListItem"></a>1.ListItem</h3><h4 id="1）组件"><a href="#1）组件" class="headerlink" title="1）组件"></a>1）组件</h4><p>下方是ListItem的组件代码，icon可以是导入的icon组件或者本地图片放在img标签内，这点随意。<br>注意，因为是tsx，所以该组件需要声明类型。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">//ListItem.tsx</span><br><span class="line">import React from &#x27;react&#x27;;</span><br><span class="line"></span><br><span class="line">interface List&#123;</span><br><span class="line">  title: string;</span><br><span class="line">  icon: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface ListItemProps &#123;</span><br><span class="line">  list: List;</span><br><span class="line">  onClick: () =&gt; void;</span><br><span class="line">  selected?: boolean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const ListItem: React.FC&lt;ListItemProps&gt; = (&#123;</span><br><span class="line">  list,</span><br><span class="line">  onClick,</span><br><span class="line">  selected = false,</span><br><span class="line">&#125;) =&gt; &#123;</span><br><span class="line">return(</span><br><span class="line">&lt;div</span><br><span class="line">  className=&#123;`flex items-center justify-between p-4 text-sm $&#123;selected?&#x27;border-l-4 border-l-black bg-gray-500&#x27;:&#x27;&#x27;&#125;`&#125;</span><br><span class="line">  onClick=&#123;onClick&#125;</span><br><span class="line">&gt;</span><br><span class="line">  &lt;div className=&quot;flex items-center&quot;&gt;</span><br><span class="line">    &lt;div className=&quot;relative mr-4 size-10&quot;&gt;</span><br><span class="line">      &lt;img src=&#123;list.icon&#125; alt=&quot;&quot;/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div className=&quot;font-semibold&quot;&gt;&#123;list.title&#125;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个组件接收三个参数，分别是list对象、onClick函数和select状态。根据这三个，在story文件中定义不同的story。</p><h4 id="2）story"><a href="#2）story" class="headerlink" title="2）story"></a>2）story</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//ListItem.stories.tsx</span><br><span class="line">import &#123; Meta, StoryObj &#125; from &#x27;@storybook/react&#x27;;</span><br><span class="line">import ListItem from &#x27;./ListItem&#x27;;</span><br><span class="line"></span><br><span class="line">const meta: Meta&lt;typeof ListItem&gt; = &#123;</span><br><span class="line">  title: &#x27;List/ListItem&#x27;,</span><br><span class="line">  component: ListItem,</span><br><span class="line">  argTypes: &#123;</span><br><span class="line">    onClick: &#123; action: &#x27;onClick&#x27; &#125;,</span><br><span class="line">    selected: &#123; control: &#x27;boolean&#x27; &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  tags: [&#x27;autodocs&#x27;],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default meta;</span><br><span class="line"></span><br><span class="line">type Story = StoryObj&lt;typeof ListItem&gt;;</span><br></pre></td></tr></table></figure><p>编写story文件，导入Meta生成meta，定义组件的属性。对于onClick和selected，放在<code>argTypes</code>中，因为需要在文档中实现这两个属性的交互。StoryObj用于生成推断类型，在生成story实例时进行类型声明</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//ListItem.stories.tsx</span><br><span class="line">const List = &#123;</span><br><span class="line">title: &quot;tmp1&quot;;</span><br><span class="line">  icon: &quot;img1&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export const Default: Story = &#123;</span><br><span class="line">  args: &#123;</span><br><span class="line">    network: List,</span><br><span class="line">    selected: false,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export const Selected: Story = &#123;</span><br><span class="line">  args: &#123;</span><br><span class="line">    network: List,</span><br><span class="line">    selected: true,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上方的代码生成了两个story实例。在args中定义属性。args也可以在meta定义时声明，这样就可以得到所有story实例通用的属性。类似继承和重写。</p><h3 id="2-List"><a href="#2-List" class="headerlink" title="2.List"></a>2.List</h3><h4 id="1）组件-1"><a href="#1）组件-1" class="headerlink" title="1）组件"></a>1）组件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">//List.tsx</span><br><span class="line">import React from &#x27;react&#x27;;</span><br><span class="line">import ListItem from &#x27;./ListItem&#x27;;</span><br><span class="line"></span><br><span class="line">interface List&#123;</span><br><span class="line">  title: string;</span><br><span class="line">  icon: string;</span><br><span class="line">&#125;</span><br><span class="line">interface ListProps &#123;</span><br><span class="line">  lists: List[];</span><br><span class="line">  onSelect: () =&gt; void;</span><br><span class="line">  selected:string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const List: React.FC&lt;ListProps&gt; = (&#123;</span><br><span class="line">  lists,</span><br><span class="line">  onSelect,</span><br><span class="line">  selected</span><br><span class="line">&#125;) =&gt; &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div className=&quot;divide-y&quot;&gt;</span><br><span class="line">      &#123;lists.map((list) =&gt; (</span><br><span class="line">        &lt;ListItem</span><br><span class="line">          key=&#123;list.title&#125;</span><br><span class="line">          list=&#123;list&#125;</span><br><span class="line">          onClick=&#123;onSelect&#125;</span><br><span class="line">          selected=&#123;list.title === selected&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      ))&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default List;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2）story-1"><a href="#2）story-1" class="headerlink" title="2）story"></a>2）story</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">//List.stories.tsx</span><br><span class="line">import &#123; Meta, StoryObj &#125; from &#x27;@storybook/react&#x27;;</span><br><span class="line">import List from &#x27;./List&#x27;;</span><br><span class="line"></span><br><span class="line">const meta: Meta&lt;typeof List&gt; = &#123;</span><br><span class="line">  title: &#x27;List/List&#x27;,</span><br><span class="line">  component: List,</span><br><span class="line">  argTypes: &#123;</span><br><span class="line">    onSelect: &#123; action: &#x27;onSelect&#x27; &#125;,</span><br><span class="line">    selected: &#123; control: &#x27;text&#x27; &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default meta;</span><br><span class="line"></span><br><span class="line">type Story = StoryObj&lt;typeof List&gt;;</span><br><span class="line"></span><br><span class="line">const lists: List[] = [</span><br><span class="line">  &#123;</span><br><span class="line">    title: &#x27;tmp1&#x27;,</span><br><span class="line">    icon: &#x27;img1&#x27;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    title: &#x27;tmp2&#x27;,</span><br><span class="line">    icon: &#x27;img2&#x27;,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">export const Default: Story = &#123;</span><br><span class="line">  args: &#123;</span><br><span class="line">    list2,</span><br><span class="line">    selected: &#x27;tmp2&#x27;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> storybook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web3js连接测试网并完成交易</title>
      <link href="/2024/08/25/web3/"/>
      <url>/2024/08/25/web3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>ps：有个需求是要等待确认交易。写这篇之后，我发现直接用回调函数要等好久好久好久。找到解决方案<span class="exturl" data-url="aHR0cHM6Ly9ldGhlcmV1bS5zdGFja2V4Y2hhbmdlLmNvbS9xdWVzdGlvbnMvNjcyMzIvaG93LXRvLXdhaXQtdW50aWwtdHJhbnNhY3Rpb24taXMtY29uZmlybWVkLXdlYjMtanM=">在这个链接<i class="fa fa-external-link-alt"></i></span>但是有点麻烦。我已经弃用web3，直接使用ethersjs配合infura了，贼快。</p></blockquote><p>本文将介绍如何使用web3js在Sepolia测试网完成一次交易，本文采用两种方式获得钱包，第一种是使用metamask，第二种使用web3创建。（可跳过第一节直接从第二节阅读）<br>使用的lib版本如下<br>“web-vitals”: “^2.1.4”,<br>“web3”: “^4.11.1”</p><span id="more"></span><h1 id="使用metamask创建钱包"><a href="#使用metamask创建钱包" class="headerlink" title="使用metamask创建钱包"></a>使用metamask创建钱包</h1><h2 id="1、安装metamask"><a href="#1、安装metamask" class="headerlink" title="1、安装metamask"></a>1、安装metamask</h2><p>打开Chrome浏览器的应用商店，搜索MetaMask并安装（如下图），注意不要安装错误的有害应用。<img src="/images/web3/metamask.png" alt="商店页面"></p><h2 id="2、创建钱包"><a href="#2、创建钱包" class="headerlink" title="2、创建钱包"></a>2、创建钱包</h2><p>安装好metamask后，接下来使用MetaMask创建钱包，从扩展程序处打开metamask，点击创建新钱包，按照指引执行下一步。创建钱包后会进入钱包页面并且拥有一个账户。<br><img src="/images/web3/wallet.png" alt="钱包页面"><br>因为完成一笔交易需要两个账户，所以我们点击顶栏中间的账户，点击：添加账户或硬件钱包-添加新账户<br><img src="/images/web3/account.png" alt="添加账户"></p><h2 id="3、获取私钥"><a href="#3、获取私钥" class="headerlink" title="3、获取私钥"></a>3、获取私钥</h2><p>点击钱包页面中，顶栏右侧的三个点，点击：账户详情-显示私钥。注意，此处的私钥在web3js使用时需要加上0x表示16进制。</p><h1 id="使用web3js创建钱包"><a href="#使用web3js创建钱包" class="headerlink" title="使用web3js创建钱包"></a>使用web3js创建钱包</h1><h2 id="创建账户"><a href="#创建账户" class="headerlink" title="创建账户"></a>创建账户</h2><p>在引入web3js后，使用<code>web3.eth.accounts.create();</code>创建钱包，该方法会返回钱包地址、私钥等信息。通过这个地址可以在以太坊浏览器中搜索到账号情况。说明成功了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; web3.eth.accounts.create();</span><br><span class="line"></span><br><span class="line">return &#123;</span><br><span class="line">  address: &#x27;0xc243...78&#x27;,</span><br><span class="line">  privateKey: &#x27;0x3a...e8&#x27;,</span><br><span class="line">  signTransaction: [Function: signTransaction],</span><br><span class="line">  sign: [Function: sign],</span><br><span class="line">  encrypt: [Function: encrypt]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为需要两个账户，所以再次运行这个方法。获取第二个账户</p><h1 id="使用水龙头获取代币"><a href="#使用水龙头获取代币" class="headerlink" title="使用水龙头获取代币"></a>使用水龙头获取代币</h1><p>因为使用的是测试网，所以我们可以去水龙头领取免费的代币，<span class="exturl" data-url="aHR0cHM6Ly9mYXVjZXRzLmNoYWluLmxpbmsv">链接在这<i class="fa fa-external-link-alt"></i></span>，每24h可以获取0.1ETH。<img src="/images/web3/faucets.png" alt="水龙头页面"><br>选择需要的代币，点击下方Continue，输入刚才得到的钱包地址后点击Get tokens。稍作等待，你的代币就发送到钱包中了。</p><h1 id="进行交易"><a href="#进行交易" class="headerlink" title="进行交易"></a>进行交易</h1><h2 id="导入账户"><a href="#导入账户" class="headerlink" title="导入账户"></a>导入账户</h2><p>在发送交易之前，我们必须将发起交易的账户私钥添加到本地钱包中，以便可以使用它交易。为此，需要使用<code>web3.eth.accounts.wallet.add(your private key);</code>，输入私钥将钱包导入。（如果是metemask得到的私钥，需要加上0x的前缀）</p><h2 id="发起交易"><a href="#发起交易" class="headerlink" title="发起交易"></a>发起交易</h2><p>在参数中，需要添加gasLimit属性，它至少要21000。因为如果不这样写，它会被设置为0，测试网络将拒绝交易，因为验证器节点没法收取处理交易的费用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">web3.eth.sendTransaction(&#123;</span><br><span class="line">    from: &#x27;0xc22...4&#x27;, </span><br><span class="line">    to: &#x27;0x32....23&#x27;, </span><br><span class="line">    value: web3.utils.toWei(0.01, &#x27;ether&#x27;), </span><br><span class="line">    gasLimit: 21000</span><br><span class="line">&#125;).then(res=&gt;&#123;</span><br><span class="line">    console.log(res)</span><br><span class="line">    navigate(&quot;/sendSuccess&quot;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="完成交易"><a href="#完成交易" class="headerlink" title="完成交易"></a>完成交易</h2><p>执行上面的流程之后，就可以去以太坊浏览器查看交易是否完成了。</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web3 </tag>
            
            <tag> 区块链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>宝可梦API，用于mock</title>
      <link href="/2024/08/12/pokeAPI/"/>
      <url>/2024/08/12/pokeAPI/</url>
      
        <content type="html"><![CDATA[<h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/$&#123;pokemon.id&#125;.png</span><br></pre></td></tr></table></figure><h4 id="信息"><a href="#信息" class="headerlink" title="信息"></a>信息</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://pokeapi.co/api/v2/pokemon/$&#123;pokemon.id | pokemon.name&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>socket超时</title>
      <link href="/2024/08/12/socket/"/>
      <url>/2024/08/12/socket/</url>
      
        <content type="html"><![CDATA[<h2 id="一、yarn-socket-connection-timeout"><a href="#一、yarn-socket-connection-timeout" class="headerlink" title="一、yarn socket connection timeout"></a>一、yarn socket connection timeout</h2><ul><li>原先yarn一直是有效的，但是今天运行的时候提示超时，尝试延长超时时间无效。</li><li>解决：发现是yarn的代理配置错了。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn config set proxy http://XX</span><br><span class="line">yarn config set https-proxy http://XX</span><br></pre></td></tr></table></figure><h2 id="二、网络请求socket-connection-timeout"><a href="#二、网络请求socket-connection-timeout" class="headerlink" title="二、网络请求socket connection timeout"></a>二、网络请求socket connection timeout</h2><ul><li>在postman和apifox还有浏览器都能成功，但是在代码里发起网络请求提示超时，尝试延长超时时间无效。</li><li>解决：发现要代理，尝试在国外服务器ping是成功的</li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>隐藏滚动条|隐藏scrollbar</title>
      <link href="/2024/08/06/hide-scroll/"/>
      <url>/2024/08/06/hide-scroll/</url>
      
        <content type="html"><![CDATA[<h2 id="场景："><a href="#场景：" class="headerlink" title="场景："></a>场景：</h2><p>基于capacitor+ionic搭建的跨平台app在web端调试时会出现滚动条，不美观</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="webkit-scrollbar"><a href="#webkit-scrollbar" class="headerlink" title="::webkit-scrollbar"></a>::webkit-scrollbar</h3><p>这个方法很通用，网上大都是这个。不知道为什么我这里无效</p><h3 id="padding-margin"><a href="#padding-margin" class="headerlink" title="padding+margin"></a>padding+margin</h3><p>原理：用负值的margin把滚动条拖动到视窗外。然后用padding把移位的部分再挤压回正确视图。</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tailwind中文自用</title>
      <link href="/2024/08/01/tailwind/"/>
      <url>/2024/08/01/tailwind/</url>
      
        <content type="html"><![CDATA[<blockquote><p><del>没找到中文的文档，有些记得住的属性没写，没写完，有空再补充</del></p></blockquote><blockquote><p>好消息，找到了 <span class="exturl" data-url="aHR0cHM6Ly90YWlsd2luZC5ub2RlanMuY24vZG9jcy9pbnN0YWxsYXRpb24=">tailwind中文<i class="fa fa-external-link-alt"></i></span><br>坏消息，是机翻</p></blockquote><span id="more"></span><h2 id="flex和grid"><a href="#flex和grid" class="headerlink" title="flex和grid"></a>flex和grid</h2><p>两个的display：flex、grid<br>flex内部元素方向：flex-row、flex-row-reverse<br>flex内部元素换行：flex-wrap、flex-wrap-reverse、flex-nowrap<br>flex内部元素填充：grow、grow-0<br>flex内部元素放随：shrink、shrink-0<br>flex内部元素顺序：order-1、order-first</p><h3 id="flex盒子初始大小：因为是flex，会跟随视窗放缩"><a href="#flex盒子初始大小：因为是flex，会跟随视窗放缩" class="headerlink" title="flex盒子初始大小：因为是flex，会跟随视窗放缩"></a>flex盒子初始大小：因为是flex，会跟随视窗放缩</h3><ul><li><code>basis-0.5 ---原生---&gt; flex-basis: 0.125rem;</code></li><li><code>basis-px ---原生---&gt; flex-basis: 1px;</code></li><li><code>basis-2/3 ---原生---&gt; flex-basis: 66.666667%;</code></li></ul><h3 id="flex内部元素行为（包含grow、shrink、basis）"><a href="#flex内部元素行为（包含grow、shrink、basis）" class="headerlink" title="flex内部元素行为（包含grow、shrink、basis）"></a>flex内部元素行为（包含grow、shrink、basis）</h3><ul><li>flex-1：允许根据需要进行放缩</li><li>flex-auto：允许根据需要进行放缩，但会考虑初始大小basis</li><li>flex-initial：可缩小，不可以放大，但会考虑初始大小basis</li><li>flex-none：禁止放缩</li></ul><h3 id="grid模板列"><a href="#grid模板列" class="headerlink" title="grid模板列"></a>grid模板列</h3><ul><li>grid-cols-3：三等分的列</li><li>grid-cols-subgrid：grid内部元素的内部又有元素，使用这个属性，让他内部的元素继承爷爷元素定义的栏位、数量、gap</li></ul><h3 id="grid内部元素大小和跨列"><a href="#grid内部元素大小和跨列" class="headerlink" title="grid内部元素大小和跨列"></a>grid内部元素大小和跨列</h3><ul><li>col-span-2：元素大小2列</li><li>col-start-3：元素放第3列</li><li>col-end-8：元素在第8列前截止</li></ul><p><b>行row的没写，以col类推</p><h2 id="排版"><a href="#排版" class="headerlink" title="排版"></a>排版</h2><p>字体：font-sans、font-serif</p><p>字大小：text-xs、text-9xl</p><p>斜体：italic、not-italic</p><p>字粗细：font-thin最细、font-black最粗</p><p>字母间距：tracking-tighter最小、tracking-widest最宽</p><p>行高：leading-3、leading-tight、leading-relaxed</p><p>列表样式：list-disc符号列表、list-decimal数字列表</p><p>文本对齐：text-left、text-justify</p><p>文字颜色：text-black、text-slate-50、text-[#ffffff]</p><p>文字划线：上中下</p><p>文字划线颜色</p><p>文字划线样式</p><p>文字划线粗细</p><p>文本下划线偏移：underline-offset-0</p><p>文本转换：全部大&#x2F;小写，全部首字母大写、段落首字母大写</p><p>文本溢出</p><p>文本换行</p><p>文本缩进：文本之间空白大小</p><p>垂直对齐</p><p>空白区域：文本里的换行符和空格管不管</p><p>连字符：换行有没有连字符、一个词换多次行几个连字符</p><h3 id="（不懂）字体平滑度"><a href="#（不懂）字体平滑度" class="headerlink" title="（不懂）字体平滑度"></a>（不懂）字体平滑度</h3><ul><li>antialiased：抗锯齿</li><li>subpixel-antialiased：子像素抗锯齿</li></ul><h3 id="特殊字形"><a href="#特殊字形" class="headerlink" title="特殊字形"></a>特殊字形</h3><p>例如2^2^，H<del>2</del>O这种</p><h3 id="几行后截断文本"><a href="#几行后截断文本" class="headerlink" title="几行后截断文本"></a>几行后截断文本</h3><ul><li>line-clamp-1</li><li>line-clamp-2</li></ul><h3 id="列表子项前置图标"><a href="#列表子项前置图标" class="headerlink" title="列表子项前置图标"></a>列表子项前置图标</h3><ul><li>list-image-[url(checkmark.png)]</li></ul><h3 id="列表子项前置符号位置：1-和·"><a href="#列表子项前置符号位置：1-和·" class="headerlink" title="列表子项前置符号位置：1.和·"></a>列表子项前置符号位置：1.和·</h3><ul><li>list-outside</li><li>list-inside</li></ul><h3 id="控制伪元素"><a href="#控制伪元素" class="headerlink" title="控制伪元素"></a>控制伪元素</h3><ul><li><code>after:content-[&#39;_↗&#39;]</code></li><li><code>before:content-[attr(before)]</code></li></ul><h3 id="词语换行断开"><a href="#词语换行断开" class="headerlink" title="词语换行断开"></a>词语换行断开</h3><ul><li>break-words</li><li>break-all</li></ul><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>背景色，背景图像位置，背景重复</p><h3 id="背景滚动"><a href="#背景滚动" class="headerlink" title="背景滚动"></a>背景滚动</h3><ul><li>bg-fixed：相对视窗固定</li><li>bg-local：随视窗和容器滚动</li><li>bg-scroll：随视窗滚动，不跟随容器滚动</li></ul><h3 id="背景边界（直接裁剪）"><a href="#背景边界（直接裁剪）" class="headerlink" title="背景边界（直接裁剪）"></a>背景边界（直接裁剪）</h3><ul><li>bg-clip-border：背景覆盖边框后面</li><li>bg-clip-padding：背景覆盖padding后面</li><li>bg-clip-content：背景覆盖容器后面</li><li>bg-clip-text：裁剪背景配合文本，使背景透过文本可见</li></ul><h3 id="背景相对（根据对应属性展示背景，不裁剪）"><a href="#背景相对（根据对应属性展示背景，不裁剪）" class="headerlink" title="背景相对（根据对应属性展示背景，不裁剪）"></a>背景相对（根据对应属性展示背景，不裁剪）</h3><ul><li>bg-origin-border：背景有边框后面那么大</li><li>bg-origin-padding：背景有padding后面那么大</li><li>bg-origin-content：背景只有容器大小那么大</li></ul><h3 id="背景尺寸"><a href="#背景尺寸" class="headerlink" title="背景尺寸"></a>背景尺寸</h3><ul><li>bg-auto：默认大小</li><li>bg-cover：缩放背景，直到填满</li><li>bg-contain：缩放知道碰到外边缘，不裁剪拉伸，但会出现重复</li></ul><h3 id="背景色渐变"><a href="#背景色渐变" class="headerlink" title="背景色渐变"></a>背景色渐变</h3><ul><li><code>bg-gradient-to-r from-gray-500 to-blue-800</code>：到右边，从gray500到blue800</li><li><code>bg-gradient-to-tr from-cyan-500 to-blue-500</code>：到右上，从cyan500到blue500<br>以此类推</li></ul><h2 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h2><p>边框圆角</p><p>边框宽度</p><p>边框颜色</p><p>边框样式</p><p>元素间边框宽度：divide-x</p><p>元素间边框颜色：divide-black</p><p>元素间边框样式：divide-dashed</p><p><code>border占用空间，outline不占用空间，不会影响元素的尺寸和位置</code></p><p><code>border 可应用于几乎所有有形的html元素，而outline 是针对链接、表单控件、ImageMap和span等元素设计。</code></p><p>轮廓宽度：outline-0、outline-1</p><p>轮廓颜色</p><p>轮廓样式</p><p>轮廓偏移</p><p><code>环是tailwind预定义的边框样式，即开即用</code></p><p>环宽</p><p>环颜色</p><p>环偏移量</p><p>环偏移区域的颜色</p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>阴影</p><p>阴影颜色</p><p>透明度</p><p>颜色混合模式</p><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p>（颜色效果的标签前面加上backdrop，会变成对元素背后的元素生效）</p><h3 id="模糊效果"><a href="#模糊效果" class="headerlink" title="模糊效果"></a>模糊效果</h3><ul><li>blur-none</li><li>blur-sm<br>以此类推</li></ul><h3 id="亮度"><a href="#亮度" class="headerlink" title="亮度"></a>亮度</h3><ul><li>brightness-0<br>以此类推</li></ul><h3 id="对比度"><a href="#对比度" class="headerlink" title="对比度"></a>对比度</h3><ul><li>contrast-0<br>以此类推</li></ul><h3 id="投影效果"><a href="#投影效果" class="headerlink" title="投影效果"></a>投影效果</h3><p>此投影不同于shadow之处在于，他的光线是可以穿透的，他的投影是边框的投影，而shadow会被div挡住，只有边框有阴影</p><ul><li>drop-shadow-none</li><li>drop-shadow-sm<br>以此类推</li></ul><h3 id="灰度"><a href="#灰度" class="headerlink" title="灰度"></a>灰度</h3><ul><li>grayscale-0</li><li>grayscale</li></ul><h3 id="（不懂）色相旋转：角度"><a href="#（不懂）色相旋转：角度" class="headerlink" title="（不懂）色相旋转：角度"></a>（不懂）色相旋转：角度</h3><ul><li>hue-rotate-0</li><li>hue-rotate-15</li></ul><h3 id="反转颜色"><a href="#反转颜色" class="headerlink" title="反转颜色"></a>反转颜色</h3><ul><li>invert-0</li><li>invert</li></ul><h3 id="饱和度：0、50、100、150、200"><a href="#饱和度：0、50、100、150、200" class="headerlink" title="饱和度：0、50、100、150、200"></a>饱和度：0、50、100、150、200</h3><ul><li>saturate-0</li></ul><h3 id="棕色还是原色？？？"><a href="#棕色还是原色？？？" class="headerlink" title="棕色还是原色？？？"></a>棕色还是原色？？？</h3><ul><li>sepia-0</li><li>sepia</li></ul><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><h3 id="边框合并"><a href="#边框合并" class="headerlink" title="边框合并"></a>边框合并</h3><h3 id="边框间距"><a href="#边框间距" class="headerlink" title="边框间距"></a>边框间距</h3><h3 id="表格布局"><a href="#表格布局" class="headerlink" title="表格布局"></a>表格布局</h3><h3 id="标题位置"><a href="#标题位置" class="headerlink" title="标题位置"></a>标题位置</h3><h2 id="元素动效和动画"><a href="#元素动效和动画" class="headerlink" title="元素动效和动画"></a>元素动效和动画</h2><h3 id="过渡动效：colors、opacity、shadow、transform"><a href="#过渡动效：colors、opacity、shadow、transform" class="headerlink" title="过渡动效：colors、opacity、shadow、transform"></a>过渡动效：colors、opacity、shadow、transform</h3><ul><li>transition-none</li><li>transition-all</li><li>transition<br>以此类推</li></ul><h3 id="过渡时间"><a href="#过渡时间" class="headerlink" title="过渡时间"></a>过渡时间</h3><ul><li>duration-0<br>以此类推</li></ul><h3 id="过渡时间的函数：快、快慢快之类的"><a href="#过渡时间的函数：快、快慢快之类的" class="headerlink" title="过渡时间的函数：快、快慢快之类的"></a>过渡时间的函数：快、快慢快之类的</h3><ul><li>ease-linear：线性</li><li>ease-in：缓慢进入</li><li>ease-out</li><li>ease-in-out</li></ul><h3 id="开始动效前的延时"><a href="#开始动效前的延时" class="headerlink" title="开始动效前的延时"></a>开始动效前的延时</h3><ul><li>delay-0<br>以此类推</li></ul><h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><ul><li>animate-spin：线性旋转动画，表示加载中</li><li>animate-ping：使元素发出波纹，表示提醒</li><li>animate-pulse：使元素淡入淡出，表示加载中</li><li>animate-bounce：使元素上下弹，表示提醒</li></ul><h2 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h2><h3 id="缩放：缩放的百分比"><a href="#缩放：缩放的百分比" class="headerlink" title="缩放：缩放的百分比"></a>缩放：缩放的百分比</h3><ul><li>scale-95</li><li>scale-150</li><li>scale-x-95<br>以此类推</li></ul><h3 id="绕中心旋转：旋转度数"><a href="#绕中心旋转：旋转度数" class="headerlink" title="绕中心旋转：旋转度数"></a>绕中心旋转：旋转度数</h3><ul><li>rotate-0</li><li>rotate-90</li></ul><h3 id="偏移"><a href="#偏移" class="headerlink" title="偏移"></a>偏移</h3><ul><li><code>translate-x-0 ---原生---&gt; transform: translateX(0px);</code></li><li><code>translate-x-px---原生---&gt; transform: translateX(1px);</code></li><li><code>translate-x-0.5---原生---&gt; transform: translateX(0.125rem);</code><br>以此内推</li></ul><h3 id="倾斜：立体的倾斜-0-1-2-3-6-12"><a href="#倾斜：立体的倾斜-0-1-2-3-6-12" class="headerlink" title="倾斜：立体的倾斜 0|1|2|3|6|12"></a>倾斜：立体的倾斜 0|1|2|3|6|12</h3><ul><li>skew-y-0</li><li>skew-x-1<br>以此类推</li></ul><h3 id="围着指定地方旋转：左上角、中心、上面"><a href="#围着指定地方旋转：左上角、中心、上面" class="headerlink" title="围着指定地方旋转：左上角、中心、上面"></a>围着指定地方旋转：左上角、中心、上面</h3><ul><li>origin-center</li><li>origin-top</li><li>origin-top-right<br>以此内推</li></ul><h2 id="交互性"><a href="#交互性" class="headerlink" title="交互性"></a>交互性</h2><h3 id="滚动行为：在用导航或者scrollAPI操作时，指定滚动行为"><a href="#滚动行为：在用导航或者scrollAPI操作时，指定滚动行为" class="headerlink" title="滚动行为：在用导航或者scrollAPI操作时，指定滚动行为"></a>滚动行为：在用导航或者scrollAPI操作时，指定滚动行为</h3><ul><li>scroll-auto：默认，一般点了导航，画面直接显示导航位置画面，不出现滚上去的视觉效果</li><li>scroll-smooth：平滑地滚到导航位置</li></ul><h3 id="（不懂）滚动元素的外边距：为每一个元素定义，会影响元素的吸附（即回弹位置）"><a href="#（不懂）滚动元素的外边距：为每一个元素定义，会影响元素的吸附（即回弹位置）" class="headerlink" title="（不懂）滚动元素的外边距：为每一个元素定义，会影响元素的吸附（即回弹位置）"></a>（不懂）滚动元素的外边距：为每一个元素定义，会影响元素的吸附（即回弹位置）</h3><ul><li>scroll-m-0</li><li>scroll-mx-0</li><li>scroll-ml-0</li><li>以此类推</li></ul><h3 id="（不懂）包裹滚动元素盒子的内边距：为盒子定义"><a href="#（不懂）包裹滚动元素盒子的内边距：为盒子定义" class="headerlink" title="（不懂）包裹滚动元素盒子的内边距：为盒子定义"></a>（不懂）包裹滚动元素盒子的内边距：为盒子定义</h3><ul><li>scroll-p-0</li><li>scroll-px-0</li><li>scroll-pl-0</li></ul><h3 id="指定滚动元素吸附位置：为每一个元素定义"><a href="#指定滚动元素吸附位置：为每一个元素定义" class="headerlink" title="指定滚动元素吸附位置：为每一个元素定义"></a>指定滚动元素吸附位置：为每一个元素定义</h3><ul><li>snap-start</li><li>snap-end</li><li>snap-center</li><li>snap-align-none</li></ul><h3 id="（触摸屏上看）唰的拉过去要不要停下来被吸附：为每个元素定义"><a href="#（触摸屏上看）唰的拉过去要不要停下来被吸附：为每个元素定义" class="headerlink" title="（触摸屏上看）唰的拉过去要不要停下来被吸附：为每个元素定义"></a>（触摸屏上看）唰的拉过去要不要停下来被吸附：为每个元素定义</h3><ul><li>snap-normal：不停下来</li><li>snap-always：遇到就停下</li></ul><h3 id="吸附的严格程度：滑过一点就吸附回去？滑过再多一点点才吸附回去？"><a href="#吸附的严格程度：滑过一点就吸附回去？滑过再多一点点才吸附回去？" class="headerlink" title="吸附的严格程度：滑过一点就吸附回去？滑过再多一点点才吸附回去？"></a>吸附的严格程度：滑过一点就吸附回去？滑过再多一点点才吸附回去？</h3><ul><li>snap-none</li><li>snap-x</li><li>snap-y</li><li>snap-both</li><li>snap-mandatory：比默认容易滑过去</li><li>snap-proximity：浏览器默认</li></ul><h3 id="（触摸屏上看）能拖动的方向，包括能不能缩放"><a href="#（触摸屏上看）能拖动的方向，包括能不能缩放" class="headerlink" title="（触摸屏上看）能拖动的方向，包括能不能缩放"></a>（触摸屏上看）能拖动的方向，包括能不能缩放</h3><ul><li>touch-auto</li><li>touch-none</li><li>touch-pan-x</li><li>touch-pan-left<br>其余以此类推，y轴的是up和down</li><li>touch-manipulation：等于auto去除了双击缩放之类的功能</li><li>touch-pinch-zoom：启用多指移动缩放页面</li></ul><h3 id="防止被选中"><a href="#防止被选中" class="headerlink" title="防止被选中"></a>防止被选中</h3><ul><li>select-none</li><li>select-text</li><li>select-all</li><li>select-auto</li></ul><h3 id="强调色：比如选择框的颜色"><a href="#强调色：比如选择框的颜色" class="headerlink" title="强调色：比如选择框的颜色"></a>强调色：比如选择框的颜色</h3><ul><li>accent-slate-950<br>以此类推</li></ul><h3 id="表单样式：比如select的框框"><a href="#表单样式：比如select的框框" class="headerlink" title="表单样式：比如select的框框"></a>表单样式：比如select的框框</h3><ul><li>appearance-none</li><li>appearance-auto</li></ul><h3 id="（不懂）控制文本输入光标颜色"><a href="#（不懂）控制文本输入光标颜色" class="headerlink" title="（不懂）控制文本输入光标颜色"></a>（不懂）控制文本输入光标颜色</h3><ul><li>caret-gray-500<br>以此类推</li></ul><h3 id="元素响应点击事件"><a href="#元素响应点击事件" class="headerlink" title="元素响应点击事件"></a>元素响应点击事件</h3><p>pointer-events-none<br>pointer-events-auto</p><h3 id="控制元素大小"><a href="#控制元素大小" class="headerlink" title="控制元素大小"></a>控制元素大小</h3><ul><li>resize-none</li><li>resize-y</li><li>resize-x</li><li>resize：xy轴都能拖动</li></ul><h2 id="SVG"><a href="#SVG" class="headerlink" title="SVG"></a>SVG</h2><h3 id="填充颜色：可以透明或者继承"><a href="#填充颜色：可以透明或者继承" class="headerlink" title="填充颜色：可以透明或者继承"></a>填充颜色：可以透明或者继承</h3><ul><li>fill-white</li><li>fill-slate-50<br>以此类推</li></ul><h3 id="线段颜色：可以透明或者继承"><a href="#线段颜色：可以透明或者继承" class="headerlink" title="线段颜色：可以透明或者继承"></a>线段颜色：可以透明或者继承</h3><ul><li>stroke-white</li><li>stroke-slate-50<br>以此类推</li></ul><h3 id="线段粗细"><a href="#线段粗细" class="headerlink" title="线段粗细"></a>线段粗细</h3><ul><li>stroke-0</li><li>stroke-1</li><li>stroke-2</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新服务器配git、node、nginx丝滑连招</title>
      <link href="/2024/05/22/%E6%96%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2024/05/22/%E6%96%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>环境: centos7</p><span id="more"></span><h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><ol><li>安装<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install git（失败就把yum安装一下：sudo apt install yum）</span><br><span class="line">git --version（查看是否安装成功）</span><br></pre></td></tr></table></figure></li><li>配置<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;名字&quot;</span><br><span class="line">git config --global user.email &quot;邮件地址&quot;</span><br><span class="line">git config --global --list（查看配置信息）</span><br></pre></td></tr></table></figure></li><li>github添加ssh-key<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C 邮件地址 （出现的选择直接一路回车）</span><br><span class="line">cat ~/.ssh/id_rsa.pub （把出现的所有复制粘贴到github的ssh-keys里面新建）</span><br></pre></td></tr></table></figure></li></ol><h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><ol><li>下载<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">直接本地下载之后用mobaxterm传到服务器里面，然后解压。</span><br></pre></td></tr></table></figure></li><li>配置环境<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/bin</span><br><span class="line">ln -s 存的目录/node-v16.15.0-linux-x64/bin/node</span><br><span class="line">ln -s 存的目录/node-v16.15.0-linux-x64/bin/npm</span><br><span class="line">ln -s 存的目录/node-v16.15.0-linux-x64/bin/npx</span><br></pre></td></tr></table></figure></li><li>验证<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入node -v和npm -v看下行不行</span><br></pre></td></tr></table></figure></li></ol><h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3><ol><li>下载<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yum install nginx</span><br><span class="line">nginx（启动nginx，去浏览器里面看服务器的80端口有没有页面。有就成功了）</span><br><span class="line">//使用命令nginx -t查找nginx配置文件</span><br><span class="line">并使用vi命令修改该配置文件</span><br><span class="line">nginx -t</span><br><span class="line">vi /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure></li><li>配置<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">nginx -t（查看nginx配置文件在哪）</span><br><span class="line">vi 配置文件的地址（修改配置文件）</span><br><span class="line"></span><br><span class="line">====我的配置如下====</span><br><span class="line">server &#123;</span><br><span class="line">        listen       9000;</span><br><span class="line">        server_name  algovis;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">                root /usr/projects/algorithm-react/dist;</span><br><span class="line">                index index.html index.htm;</span><br><span class="line">                try_files  $uri $uri/ /index.html;</span><br><span class="line">                #proxy_pass http://localhost:3001;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">==================</span><br><span class="line"></span><br><span class="line">listen就是把页面放9000端口</span><br><span class="line">location里面的root是你要用的index文件的地址</span><br><span class="line">index是你要用的文件的文件名</span><br><span class="line">try_files是为了解决刷新页面出现404的情况</span><br><span class="line">(如果后端没配置跨域，要在location里面用proxy_pass作一个跨域的处理)</span><br><span class="line"></span><br><span class="line">nginx -s reload（重启nginx，使配置生效）</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> 服务器 </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git自用随笔</title>
      <link href="/2024/05/13/git_note/"/>
      <url>/2024/05/13/git_note/</url>
      
        <content type="html"><![CDATA[<h1 id="2024-8更新"><a href="#2024-8更新" class="headerlink" title="2024.8更新"></a>2024.8更新</h1><p>我司目前开发流程：</p><ul><li>在开发分支创建子分支 <code>git checkout -b 子分支名</code></li><li>…经过一段时间开发后</li><li>切换到开发分支 <code>git checkout develop</code></li><li>拉取远程开发分支的更新 <code>git pull</code></li><li>切换到子分支 <code>git checkout 子分支名</code></li><li>合并子分支 <code>git rebase develop</code></li><li>强制推送子分支 <code>git push 子分支名 --forece</code><span id="more"></span></li></ul><h1 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h1><ul><li>push失败<br>因为远程比本地新，要拉到本地进行合并。<code>git pull</code>拉取，拉取失败，本地分支没有和远程链接，使用<code>git branch --set-upstream-to=origin/&lt;branch&gt; dev</code>进行链接，链接后再次pull，pull提示合并冲突，解决冲突并提交，然后再次<code>git push origin &lt;branch name&gt;</code></li><li>merge和rebase<ul><li>merge<br><code>merge</code>命令会合并指定分支到当前分支，通常会使用<code>Fast forward</code>模式，这种模式会导致删除分支后，丢掉分支信息。如果要取消<code>Fast forward</code>模式，要在<code>merge</code>命令增加<code>--no-ff</code>指令。</li><li>rebase<br>  <code>merge</code>命令会导致<code>git log</code>的时候产生一大堆的信息乱的要死，使用<code>rebase</code>可以把提交历史变成一条干净的直线。但是只适合该分支只有自己一人使用的情况，因为如果自己改变了远程分支，但是协作者本地还是原来的样子，在他pull远程master时，会丢失提交记录。</li></ul></li><li>stash<br>  在当前的修改未完成时，需要进行其他的修改，可以使用stash将‘未完成的修改’暂存起来，当其他的修改完成后，通过<code>git stash pop</code>进行恢复，或使用<code>git stash apply</code>恢复，但不删除stash内容，需要额外使用<code>git stash drop</code>删除</li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>koa-session获取不到session踩坑记录</title>
      <link href="/2024/04/17/koa-question/"/>
      <url>/2024/04/17/koa-question/</url>
      
        <content type="html"><![CDATA[<p>前端react，后端koa，然后用session作了验证码的存储。后端用koa-cors做了跨域。</p><p>场景：前端请求验证码，后端session保存验证码，前端发送验证码给后端，后端取出session校验。这里校验的时候拿不到。</p><span id="more"></span><p>查找原因：第一反应，没拿到session，代码写错了。用apifox测试了一下，能拿到。这时候就想到是跨域了。但是在其他接口调试的时候，提示跨域，我通过<code>use(cros())</code>做了后端跨域，一下子找不到问题在哪。</p><p>最终：最终有两个地方要改。<br>1、要对cros传入配置。我的配置如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.use(cors(&#123;</span><br><span class="line">    origin: &#x27;http://localhost:3001&#x27;,</span><br><span class="line">    allowMethods: [&#x27;GET&#x27;, &#x27;POST&#x27;, &#x27;PUT&#x27;, &#x27;DELETE&#x27;, &#x27;OPTIONS&#x27;],</span><br><span class="line">    allowHeaders: [&#x27;Content-Type&#x27;, &#x27;Authorization&#x27;, &#x27;Accept&#x27;],</span><br><span class="line">    credentials: true</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><p>2、前端使用axios封装的网络请求，但是axios默认不携带cookies，所以需要把axios的<code>withCredentials = true</code><br>做了上面两步就能正常在浏览器中实现验证码校验了。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> koa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react-split-pane设置大小</title>
      <link href="/2024/04/17/react-split-pane/"/>
      <url>/2024/04/17/react-split-pane/</url>
      
        <content type="html"><![CDATA[<p>当前版本是2.0.3，通过npm install react-split-pane@next安装的，在作者github给的样例中，看到有pane组件，但是导入包没有看到。</p><p>这边直接去看了下npm包源文件，发现没有导出pane组件，稍作修改把他导出之后，顺便把d.ts也改一下。就可以在项目中正常使用这个包了。并且可以通过pane包裹组件达到设置区域大小的效果。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>调用api后，nodejs进程崩溃</title>
      <link href="/2023/10/26/express-question/"/>
      <url>/2023/10/26/express-question/</url>
      
        <content type="html"><![CDATA[<h5 id="发生场景"><a href="#发生场景" class="headerlink" title="发生场景"></a>发生场景</h5><p>nodejs+express+mysql后端。</p><h5 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h5><p>Error [ERR_HTTP_HEADERS_SENT]: Cannot set headers after they are sent to the client</p><h5 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h5><p>在调用api后，本地后端进程崩溃。</p><h5 id="问题代码"><a href="#问题代码" class="headerlink" title="问题代码"></a>问题代码</h5><p><img src="/images/express-question/img.png"><br>没写else，res.send先后顺序不明</p><h5 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h5><p>如图加上else</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>d3+ts类型为空</title>
      <link href="/2023/08/28/d3-ts/"/>
      <url>/2023/08/28/d3-ts/</url>
      
        <content type="html"><![CDATA[<p>DOMException: Failed to execute ‘querySelector‘ on ‘Document‘: The provided selector is empty.</p><p><img src="/images/d3-ts/img.png"><br>报错原因：在初始化的时候，给变量定义了xxx : 类型 &#x3D; d3.select(‘’)<br>解决办法：使用?或!，如：xxx?:类型或xxx!:类型</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> d3js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS中Date常用方法</title>
      <link href="/2023/06/27/js_date/"/>
      <url>/2023/06/27/js_date/</url>
      
        <content type="html"><![CDATA[<h6 id="new-Date-参数可选"><a href="#new-Date-参数可选" class="headerlink" title="new Date(参数可选)"></a>new Date(参数可选)</h6><p>返回都是<code>Wed Jun 28 2023 09:16:31 GMT+0800 (中国标准时间)</code>格式的日期。<br>如果没有参数就是当前系统时间。<br>参数格式可以是以下形式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x27;December 17, 1995 03:24:00&#x27;</span><br><span class="line">&#x27;1995-12-17T03:24:00&#x27;</span><br><span class="line">1995, 11, 17</span><br><span class="line">1995, 11, 17, 3, 24, 0</span><br></pre></td></tr></table></figure><h6 id="得到当前时间戳，-1-31-日、星期日到六-0-6"><a href="#得到当前时间戳，-1-31-日、星期日到六-0-6" class="headerlink" title="得到当前时间戳，(1-31)日、星期日到六(0-6)"></a>得到当前时间戳，(1-31)日、星期日到六(0-6)</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let now = Date.now()</span><br><span class="line">//也可以</span><br><span class="line">let now = new Date().getTime()</span><br><span class="line"></span><br><span class="line">//日</span><br><span class="line">getDate()</span><br><span class="line">//星期</span><br><span class="line">getDay</span><br></pre></td></tr></table></figure><h6 id="Date-parse"><a href="#Date-parse" class="headerlink" title="Date.parse()"></a>Date.parse()</h6><p>解析参数的日期，返回时间戳，但是后三位置0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x27;Wed Jun 28 2023 09:16:31 GMT+0800 (中国标准时间)&#x27;</span><br><span class="line">&#x27;December 17, 1995 03:24:00&#x27;</span><br><span class="line">&#x27;1995-12-17T03:24:00&#x27;</span><br><span class="line">1995, 11, 17</span><br><span class="line">1995, 11, 17, 3, 24, 0</span><br></pre></td></tr></table></figure><h6 id="最近的xx天"><a href="#最近的xx天" class="headerlink" title="最近的xx天"></a>最近的xx天</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const end = new Date();</span><br><span class="line">const start = new Date();</span><br><span class="line">start.setTime(start.getTime() - 3600 * 1000 * 24 * xx);</span><br></pre></td></tr></table></figure><h6 id="得到天或者星期几"><a href="#得到天或者星期几" class="headerlink" title="得到天或者星期几"></a>得到天或者星期几</h6><p>get</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ts+webpack视频播放器组件（四）</title>
      <link href="/2023/06/12/ts_video/4/"/>
      <url>/2023/06/12/ts_video/4/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原视频：<span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXNVNHkxYTdyaQ==">https://www.bilibili.com/video/BV1sU4y1a7ri<i class="fa fa-external-link-alt"></i></span></p></blockquote><blockquote><p>day4 窗口关闭、窗口内播放器</p></blockquote><span id="more"></span><ol><li><p>窗口能打开了。但是不能关闭了。。。所以我们要写一个关闭事件绑定给x图标。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 事件操作</span><br><span class="line">  handle() &#123;</span><br><span class="line">    let popupClose = this.tempContainer.querySelector(`.$&#123;styles[&#x27;popup-title&#x27;]&#125; i`)</span><br><span class="line">    popupClose.addEventListener(&#x27;click&#x27;,()=&gt;&#123;</span><br><span class="line">      document.body.removeChild(this.tempContainer)</span><br><span class="line">      this.settings.mask &amp;&amp; document.body.removeChild(this.mask)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>记得，要在init里面去调用handle。</p></li><li><p>回到我们前文给iView接口设置的content属性。给他添加一个HTMLElement类型的参数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">interface iView &#123;</span><br><span class="line">  width?: string,</span><br><span class="line">  height?: string,</span><br><span class="line">  title?: string,</span><br><span class="line">  pos?: string,</span><br><span class="line">  mask?: boolean,</span><br><span class="line">  content?: (dom:HTMLElement) =&gt; void</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>然后在view类里面，定义一个方法，用来回调content函数。我这里命名为createContent</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//回调使用content创建视频（根据对应需求，如果是表格等就创建表格。）</span><br><span class="line">  createContent()&#123;</span><br><span class="line">    let popupContent = this.tempContainer.querySelector(`.$&#123;styles[&#x27;popup-content&#x27;]&#125;`)</span><br><span class="line">    this.settings.content(popupContent)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>记得要在init里调用</p></li><li><p>接下来该新建和视频功能相关的组件。再components目录下，新建一个video&#x2F;index.ts。在这个ts里，仿造popView的写法，设置接口降低耦合等等。具体代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">interface iVideo&#123;</span><br><span class="line">  url:string</span><br><span class="line">  dom:HTMLElement</span><br><span class="line">  </span><br><span class="line">  width?:string</span><br><span class="line">  height?:string</span><br><span class="line">  autoplay?:boolean</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface iComponents&#123;</span><br><span class="line">  tempContainer</span><br><span class="line">  init()</span><br><span class="line">  template()</span><br><span class="line">  handle()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function videoView(options:iVideo)&#123;</span><br><span class="line">  return new video(options)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class video implements iComponents&#123;</span><br><span class="line">  tempContainer</span><br><span class="line">  constructor(private settings:iVideo) &#123;</span><br><span class="line">    // this.settings = Object.assgin(&#123;</span><br><span class="line">    //   width:&#x27;100%&#x27;,</span><br><span class="line">    //   height:&#x27;100%&#x27;,</span><br><span class="line">    //   autoplay:false</span><br><span class="line">    // &#125;,settings)</span><br><span class="line">    this.settings = &#123;</span><br><span class="line">      url:settings.url,</span><br><span class="line">      dom:settings.dom,</span><br><span class="line">      width:settings.width||&#x27;100%&#x27;,</span><br><span class="line">      height:settings.height||&#x27;100%&#x27;,</span><br><span class="line">      autoplay:settings.autoplay||false</span><br><span class="line">    &#125;</span><br><span class="line">    this.init()</span><br><span class="line">  &#125;</span><br><span class="line">  init() &#123;</span><br><span class="line">    this.template()</span><br><span class="line">    this.handle()</span><br><span class="line">  &#125;</span><br><span class="line">  template() &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  handle() &#123;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default videoView</span><br></pre></td></tr></table></figure><p>注意，代码中关于assign的部分注释掉是因为ts不识别assgin属性，所以我换了一种方式去做默认值的需求</p></li><li><p>类创建成功之后，进入main.ts，把这个类导入。并在popView里面传入实例。以下是main.ts代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import &#x27;./assets/css/index.css&#x27;</span><br><span class="line">import &#x27;./assets/css/iconfont.css&#x27;</span><br><span class="line">import popView from &#x27;./components/popView&#x27;</span><br><span class="line">import videoView from &#x27;./components/videoView&#x27;</span><br><span class="line"></span><br><span class="line">let view = document.querySelector(&quot;.view div&quot;)</span><br><span class="line"></span><br><span class="line">view.addEventListener(&#x27;click&#x27;,function ()&#123;</span><br><span class="line">  let url = this.dataset.url</span><br><span class="line">  let title = this.dataset.title</span><br><span class="line">  </span><br><span class="line">  popView(&#123;</span><br><span class="line">    width:&#x27;880px&#x27;,</span><br><span class="line">    height:&#x27;556px&#x27;,</span><br><span class="line">    title,</span><br><span class="line">    pos:&#x27;center&#x27;,</span><br><span class="line">    mask:true,</span><br><span class="line">    content:(dom)=&gt;&#123;</span><br><span class="line">      //el是容器所在的dom，作为参数传给video绑定</span><br><span class="line">      videoView(&#123;</span><br><span class="line">        url,</span><br><span class="line">        dom</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>传入所需要的参数后，对播放器的模板部分进行编写。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">template() &#123;</span><br><span class="line">    this.tempContainer = document.createElement(&#x27;div&#x27;)</span><br><span class="line">    this.tempContainer.className = styles.video</span><br><span class="line">    this.tempContainer.style.width = this.settings.width</span><br><span class="line">    this.tempContainer.style.height = this.settings.height</span><br><span class="line">    this.tempContainer.innerHTML = `</span><br><span class="line">      &lt;video class=&quot;$&#123;styles[&#x27;video-content&#x27;]&#125;&quot;</span><br><span class="line">      src=&quot;$&#123;this.settings.url&#125;&quot;</span><br><span class="line">      &gt;</span><br><span class="line">      &lt;/video&gt;</span><br><span class="line">      &lt;div class=&quot;$&#123;styles[&#x27;video-controls&#x27;]&#125;&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;$&#123;styles[&#x27;video-progress&#x27;]&#125;&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;$&#123;styles[&#x27;video-progress-now&#x27;]&#125;&quot;&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;$&#123;styles[&#x27;video-progress-suc&#x27;]&#125;&quot;&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;$&#123;styles[&#x27;video-progress-bar&#x27;]&#125;&quot;&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;$&#123;styles[&#x27;video-play&#x27;]&#125;&quot;&gt;</span><br><span class="line">          &lt;i class=&quot;iconfont icon-bofang&quot;&gt;&lt;/i&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;$&#123;styles[&#x27;video-time&#x27;]&#125;&quot;&gt;</span><br><span class="line">          &lt;span&gt;00:00&lt;/span&gt; / &lt;span&gt;00:00&lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;$&#123;styles[&#x27;video-full&#x27;]&#125;&quot;&gt;</span><br><span class="line">        &lt;i class=&quot;iconfont icon-quanping&quot;&gt;&lt;/i&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;$&#123;styles[&#x27;video-volume&#x27;]&#125;&quot;&gt;</span><br><span class="line">          &lt;i class=&quot;iconfont icon-yinliang&quot;&gt;&lt;/i&gt;</span><br><span class="line">          &lt;div class=&quot;$&#123;styles[&#x27;video-volprogress&#x27;]&#125;&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;$&#123;styles[&#x27;video-volprogress-now&#x27;]&#125;&quot;&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;$&#123;styles[&#x27;video-volprogress-bar&#x27;]&#125;&quot;&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    `</span><br><span class="line">    this.settings.dom.appendChild(this.tempContainer)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>模板创建完成后，需要调整css，这里不赘述，我们运行后，点开弹层，发现正常显示了视频。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ts </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ts+webpack视频播放器组件（三）</title>
      <link href="/2023/06/08/ts_video/3/"/>
      <url>/2023/06/08/ts_video/3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>day3，弹层创建</p></blockquote><span id="more"></span><ol><li>在index.html中，定义一个class为view的div，展示一张图片，作为点击触发视频播放器弹层的入口<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;view&quot;&gt;</span><br><span class="line">&lt;img&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li>在main.ts中，通过querySelector()获取.view绑定的dom元素，并监听他的点击事件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let view = document.querySelector(&quot;.view&quot;)</span><br><span class="line"></span><br><span class="line">view.addEventListener(&#x27;click&#x27;,function ()&#123;</span><br><span class="line">  let dom = document.querySelector(&#x27;body&#x27;)</span><br><span class="line">  console.log(&#x27;222&#x27;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>根目录下创建一个组件目录，在内部新建有关弹出的组件js，这里我创建了components&#x2F;popView&#x2F;index.ts</li><li>在index.ts中定义popView函数、view类，在函数内返回view的对象实例，并将他导出。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//index.js</span><br><span class="line">function popView()&#123;</span><br><span class="line">return new view()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class view&#123;</span><br><span class="line">constructor()&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default popView</span><br></pre></td></tr></table></figure></li><li>为了对popView和view进行约束，防止他传入错误的参数，我们需要定义接口iView和接口iComponents并使用。让popView的参数根据iView定义。iView接口里声明了和创建播放器相关的参数，例如播放器的宽高、位置等，其中content是定义弹出的容器，例如弹出播放器，还是表单等等。iComponents接口对view内需要具备哪些方法，初始化方法init()、模板创建template()。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">//index.ts</span><br><span class="line">//参数的定义</span><br><span class="line">interface iView&#123;</span><br><span class="line">  width?:string,</span><br><span class="line">  height?:string,</span><br><span class="line">  title?:string,</span><br><span class="line">  pos?:string,</span><br><span class="line">  mask?:boolean,</span><br><span class="line">  content?:()=&gt;void</span><br><span class="line">&#125;</span><br><span class="line">//组件的定义</span><br><span class="line">interface iComponents&#123;</span><br><span class="line">  //初始化</span><br><span class="line">  init(),</span><br><span class="line">  template()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function popView(options:iView)&#123;</span><br><span class="line">  return new view(options)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class view implements iComponents&#123;</span><br><span class="line">  constructor(private settings:iView) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  init() &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  template() &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default popView</span><br></pre></td></tr></table></figure></li><li>先尝试点击后，在body中新增一个dom元素。首先在iComponents接口里新增tempContainer，声明为HTMLElement，然后再template函数中，将他作为虚拟dom进行操作，并挂载到body内。将template写进init()，然后把init()写进构造器，使对象被创建时就会初始化。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">//参数的定义</span><br><span class="line">interface iView&#123;</span><br><span class="line">  width?:string,</span><br><span class="line">  height?:string,</span><br><span class="line">  title?:string,</span><br><span class="line">  pos?:string,</span><br><span class="line">  mask?:boolean,</span><br><span class="line">  content?:()=&gt;void</span><br><span class="line">&#125;</span><br><span class="line">//组件的定义</span><br><span class="line">interface iComponents&#123;</span><br><span class="line">  tempContainer:HTMLElement</span><br><span class="line">  //初始化</span><br><span class="line">  init(),</span><br><span class="line">  template(),</span><br><span class="line">  handel:()=&gt;void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function popView(options:iView)&#123;</span><br><span class="line">  return new view(options)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class view implements iComponents&#123;</span><br><span class="line">  tempContainer;</span><br><span class="line">  constructor(private settings:iView) &#123;</span><br><span class="line">    this.init()</span><br><span class="line">  &#125;</span><br><span class="line">  init() &#123;</span><br><span class="line">    this.template()</span><br><span class="line">  &#125;</span><br><span class="line">  template() &#123;</span><br><span class="line">    this.tempContainer = document.createElement(&#x27;div&#x27;)</span><br><span class="line">    this.tempContainer.innerHTML= `&lt;h1&gt;222&lt;/h1&gt;`</span><br><span class="line">    document.body.appendChild(this.tempContainer)</span><br><span class="line">  &#125;</span><br><span class="line">  handel() &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default popView</span><br></pre></td></tr></table></figure></li><li>测试添加dom元素成功，接着为view对象弄上默认值。这里用Object.assign方法，把默认值写在第一个参数，构造器接收的参数写在第二个参数。这样就可以实现，如果构造器有对应参数就进行覆盖。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">//参数的定义</span><br><span class="line">interface iView&#123;</span><br><span class="line">  width?:string,</span><br><span class="line">  height?:string,</span><br><span class="line">  title?:string,</span><br><span class="line">  pos?:string,</span><br><span class="line">  mask?:boolean,</span><br><span class="line">  content?:()=&gt;void</span><br><span class="line">&#125;</span><br><span class="line">//组件的定义</span><br><span class="line">interface iComponents&#123;</span><br><span class="line">  tempContainer:HTMLElement</span><br><span class="line">  //初始化</span><br><span class="line">  init(),</span><br><span class="line">  template(),</span><br><span class="line">  handel:()=&gt;void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function popView(options:iView)&#123;</span><br><span class="line">  return new view(options)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class view implements iComponents&#123;</span><br><span class="line">  tempContainer;</span><br><span class="line">  constructor(private settings:iView) &#123;</span><br><span class="line">    //写好默认值，如果后面有参数，用assign复制就可以覆盖默认值</span><br><span class="line">    this.settings = Object.assgin(&#123;</span><br><span class="line">      width:&#x27;100%&#x27;,</span><br><span class="line">      height:&#x27;100%&#x27;,</span><br><span class="line">      title:&#x27;&#x27;,</span><br><span class="line">      pos:&#x27;center&#x27;,</span><br><span class="line">      mask:true,</span><br><span class="line">      //定义弹层的容器，是弹出表单还是弹出视频等等</span><br><span class="line">      content:()=&gt;&#123;&#125;</span><br><span class="line">    &#125;,settings)</span><br><span class="line">    this.init()</span><br><span class="line">  &#125;</span><br><span class="line">  init() &#123;</span><br><span class="line">    this.template()</span><br><span class="line">  &#125;</span><br><span class="line">  template() &#123;</span><br><span class="line">    this.tempContainer = document.createElement(&#x27;div&#x27;)</span><br><span class="line">    this.tempContainer.innerHTML=</span><br><span class="line">      `</span><br><span class="line">      &lt;h1&gt;</span><br><span class="line">        222</span><br><span class="line">      &lt;/h1&gt;</span><br><span class="line">      `</span><br><span class="line">    document.body.appendChild(this.tempContainer)</span><br><span class="line">  &#125;</span><br><span class="line">  handel() &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default popView</span><br></pre></td></tr></table></figure></li><li>测试发现没有问题，就开始进行真正的需求，弹出一个窗口。先进行基本的窗口HTML。一部分navbar，一部分content。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">template() &#123;</span><br><span class="line">    this.tempContainer = document.createElement(&#x27;div&#x27;)</span><br><span class="line">    //样式添加</span><br><span class="line">    this.tempContainer.style.width = this.settings.width</span><br><span class="line">    this.tempContainer.style.height = this.settings.height</span><br><span class="line">    this.tempContainer.innerHTML =</span><br><span class="line">      `</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h3&gt;$&#123;this.settings.title&#125;&lt;/h3&gt;</span><br><span class="line">        &lt;i class=&quot;iconfont player-icon_close&quot;&gt;&lt;/i&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      `</span><br><span class="line">    //挂载</span><br><span class="line">    document.body.appendChild(this.tempContainer)</span><br><span class="line">    //使pos生效</span><br><span class="line">    switch (this.settings.pos) &#123;</span><br><span class="line">      case &#x27;left&#x27;:</span><br><span class="line">        this.tempContainer.style.left = 0</span><br><span class="line">        this.tempContainer.style.top = (window.innerHeight - this.tempContainer.offsetHeight) + &#x27;px&#x27;</span><br><span class="line">        break;</span><br><span class="line">      case &#x27;right&#x27;:</span><br><span class="line">        this.tempContainer.style.right = 0</span><br><span class="line">        this.tempContainer.style.top = (window.innerHeight - this.tempContainer.offsetHeight) + &#x27;px&#x27;</span><br><span class="line">        break;</span><br><span class="line">      default:</span><br><span class="line">        this.tempContainer.style.left = (window.innerWidth - this.tempContainer.offsetWidth) / 2 + &#x27;px&#x27;</span><br><span class="line">        this.tempContainer.style.top = (window.innerHeight - this.tempContainer.offsetHeight) / 2 + &#x27;px&#x27;</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">    if(this.settings.mask)&#123;</span><br><span class="line">      this.mask = document.createElement(&#x27;div&#x27;)</span><br><span class="line">      this.mask.className = styles.mask</span><br><span class="line">      this.mask.style.width = &#x27;100%&#x27;</span><br><span class="line">      this.mask.style.height = document.body.offsetHeight + &#x27;px&#x27;</span><br><span class="line">      document.body.appendChild(this.mask)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li>窗口写好了，但是没有样式，看起来贼奇怪，所有我们在组件所在目录，增加一个index.css，在index.ts中进行导入。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">.popup&#123;</span><br><span class="line">  position: fixed;</span><br><span class="line">  z-index: 20;</span><br><span class="line">&#125;</span><br><span class="line">.popup-title&#123;</span><br><span class="line">  height: 60px;</span><br><span class="line">  background-color: #f5f5f5;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: space-between;</span><br><span class="line">  align-items: center;</span><br><span class="line">&#125;</span><br><span class="line">.popup-title h3&#123;</span><br><span class="line">  font-size: 18px;</span><br><span class="line">  margin-left: 20px;</span><br><span class="line">&#125;</span><br><span class="line">.popup-title i&#123;</span><br><span class="line">  font-size: 18px;</span><br><span class="line">  margin-right: 20px;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">&#125;</span><br><span class="line">.popup-content&#123;</span><br><span class="line">  height: calc(100% - 60px);</span><br><span class="line">  background-color: white;</span><br><span class="line">&#125;</span><br><span class="line">.mask&#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  left: 0;</span><br><span class="line">  top: 0;</span><br><span class="line">  z-index: 10;</span><br><span class="line">  background-color: rgba(0, 0, 0, .5);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>但是此时又诞生一个新的问题，ts会提示找不到css模块。所以在组件的目录下，我们还需要创建一个index.css.d.ts文件，帮助ts识别。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">declare const styles : &#123;</span><br><span class="line">  readonly &quot;popup&quot; : string</span><br><span class="line">  readonly &quot;popup-title&quot; : string</span><br><span class="line">&#125;</span><br><span class="line">export default styles</span><br></pre></td></tr></table></figure></li><li>导入css文件后，需要把相应属性绑定到dom上，所以我们通过$在模板字符串内绑定。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">let styles = require(&#x27;./index.css&#x27;)</span><br><span class="line"></span><br><span class="line">//参数的定义</span><br><span class="line">interface iView&#123;</span><br><span class="line">  width?:string,</span><br><span class="line">  height?:string,</span><br><span class="line">  title?:string,</span><br><span class="line">  pos?:string,</span><br><span class="line">  mask?:boolean,</span><br><span class="line">  content?:()=&gt;void</span><br><span class="line">&#125;</span><br><span class="line">//组件的定义</span><br><span class="line">interface iComponents&#123;</span><br><span class="line">  tempContainer:HTMLElement</span><br><span class="line">  //初始化</span><br><span class="line">  init(),</span><br><span class="line">  template(),</span><br><span class="line">  handel:()=&gt;void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function popView(options:iView)&#123;</span><br><span class="line">  return new view(options)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class view implements iComponents&#123;</span><br><span class="line">  //虚拟dom对象</span><br><span class="line">  tempContainer;</span><br><span class="line">  //遮罩层对象</span><br><span class="line">  mask;</span><br><span class="line">  </span><br><span class="line">  constructor(private settings:iView) &#123;</span><br><span class="line">    //写好默认值，如果后面有参数，用assign复制就可以覆盖默认值</span><br><span class="line">    this.settings = Object.assign(&#123;</span><br><span class="line">      width: &#x27;100%&#x27;,</span><br><span class="line">      height: &#x27;100%&#x27;,</span><br><span class="line">      title: &#x27;&#x27;,</span><br><span class="line">      pos: &#x27;center&#x27;,</span><br><span class="line">      mask: true,</span><br><span class="line">      content: function () &#123; &#125;</span><br><span class="line">    &#125;, this.settings)</span><br><span class="line">    // this.settings = &#123;</span><br><span class="line">    //   width: settings.width || &#x27;100%&#x27;,</span><br><span class="line">    //   height: settings.height || &#x27;100%&#x27;,</span><br><span class="line">    //   title: settings.title || &#x27;&#x27;,</span><br><span class="line">    //   pos: settings.pos || &#x27;center&#x27;,</span><br><span class="line">    //   mask: settings.mask !== undefined ? settings.mask : true,</span><br><span class="line">    //   content: settings.content || (() =&gt; console.log(&#x27;22&#x27;))</span><br><span class="line">    // &#125;;</span><br><span class="line">    this.init()</span><br><span class="line">  &#125;</span><br><span class="line">  init() &#123;</span><br><span class="line">    this.template()</span><br><span class="line">    // this.settings.mask &amp;&amp; this.createMask()</span><br><span class="line">  &#125;</span><br><span class="line">  template() &#123;</span><br><span class="line">    this.tempContainer = document.createElement(&#x27;div&#x27;)</span><br><span class="line">    //样式添加</span><br><span class="line">    this.tempContainer.style.width = this.settings.width</span><br><span class="line">    this.tempContainer.style.height = this.settings.height</span><br><span class="line">    this.tempContainer.className = styles.popup</span><br><span class="line">    this.tempContainer.innerHTML =</span><br><span class="line">      `</span><br><span class="line">      &lt;div class=&quot;$&#123;styles[&#x27;popup-title&#x27;]&#125;&quot;&gt;</span><br><span class="line">        &lt;h3&gt;$&#123;this.settings.title&#125;&lt;/h3&gt;</span><br><span class="line">        &lt;i class=&quot;iconfont player-icon_close&quot;&gt;&lt;/i&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;$&#123;styles[&#x27;popup-content&#x27;]&#125;&quot;&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      `</span><br><span class="line">    //挂载</span><br><span class="line">    document.body.appendChild(this.tempContainer)</span><br><span class="line">    //使pos生效</span><br><span class="line">    switch (this.settings.pos) &#123;</span><br><span class="line">      case &#x27;left&#x27;:</span><br><span class="line">        this.tempContainer.style.left = 0</span><br><span class="line">        this.tempContainer.style.top = (window.innerHeight - this.tempContainer.offsetHeight) + &#x27;px&#x27;</span><br><span class="line">        break;</span><br><span class="line">      case &#x27;right&#x27;:</span><br><span class="line">        this.tempContainer.style.right = 0</span><br><span class="line">        this.tempContainer.style.top = (window.innerHeight - this.tempContainer.offsetHeight) + &#x27;px&#x27;</span><br><span class="line">        break;</span><br><span class="line">      default:</span><br><span class="line">        this.tempContainer.style.left = (window.innerWidth - this.tempContainer.offsetWidth) / 2 + &#x27;px&#x27;</span><br><span class="line">        this.tempContainer.style.top = (window.innerHeight - this.tempContainer.offsetHeight) / 2 + &#x27;px&#x27;</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  //事件操作</span><br><span class="line">  handel() &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default popView</span><br></pre></td></tr></table></figure></li><li>这种场景的窗口，一般都会有遮罩层，所有我们在模板创建方法里，增加一个判断，如果遮罩层选项为true，就多增加一个遮罩层。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if(this.settings.mask)&#123;</span><br><span class="line">      this.mask = document.createElement(&#x27;div&#x27;)</span><br><span class="line">      this.mask.className = styles.mask</span><br><span class="line">      this.mask.style.width = &#x27;100%&#x27;</span><br><span class="line">      this.mask.style.height = document.body.offsetHeight + &#x27;px&#x27;</span><br><span class="line">      document.body.appendChild(this.mask)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li>给了css之后，发现弹出的窗口是全屏的，因为我们默认的长宽是100%的，我们要在main.js里，对popView传参<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">popView(&#123;</span><br><span class="line">    width:&#x27;880px&#x27;,</span><br><span class="line">    height:&#x27;556px&#x27;,</span><br><span class="line">    pos:&#x27;center&#x27;,</span><br><span class="line">    mask:true,</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ts </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ts+webpack视频播放器组件（二）</title>
      <link href="/2023/05/29/ts_video/2/"/>
      <url>/2023/05/29/ts_video/2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原视频：<span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXNVNHkxYTdyaQ==">https://www.bilibili.com/video/BV1sU4y1a7ri<i class="fa fa-external-link-alt"></i></span></p></blockquote><blockquote><p>day2，icon导入，需求分析</p></blockquote><span id="more"></span><ol><li>播放器需要用到一些图标，比如暂停、全屏等等。</li><li>进入iconfont下载选择的icon，并下载到本地。</li><li>将压缩包内的<code>iconfont.css</code>放入src根目录下的assets中的css文件夹。并将压缩包内的<code>woff，svg，eot，ttf，woff2</code>文件放入assets中的icon文件夹，并根据路径，修改iconfont.css中对应的url。</li><li>在main.js中先进行对iconfont的导入，然后在index.html中测试并使用。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;i class=&quot;iconfont player-24gf-pause2&quot;&gt;&lt;/i&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li>为了更好的开发体验，将项目文件改成ts。首先修改文件后缀js为ts。然后再webpack.config.js中的entry入口修改。由于修改为ts后，main.ts中对a.ts的导入就不允许附带.ts，所以需要在webpack.config.js中添加对打包拓展名的识别。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&quot;path&quot;);</span><br><span class="line">const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;)</span><br><span class="line">const &#123;CleanWebpackPlugin&#125; = require(&#x27;clean-webpack-plugin&#x27;)</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry:&#x27;./src/main.ts&#x27;,</span><br><span class="line">  output:&#123;</span><br><span class="line">    path:path.resolve(__dirname,&#x27;dist&#x27;),</span><br><span class="line">    filename: &quot;main.js&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    &quot;extensions&quot;:[&#x27;.ts&#x27;,&#x27;.js&#x27;,&#x27;.json&#x27;]</span><br><span class="line">  &#125;,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    static:&#x27;/dist&#x27;,</span><br><span class="line">    open:true</span><br><span class="line">  &#125;,</span><br><span class="line">  module:&#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.css$/,</span><br><span class="line">        use:[&#x27;style-loader&#x27;,&#x27;css-loader&#x27;]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: &quot;./src/index.html&quot;,</span><br><span class="line">    &#125;),</span><br><span class="line">    new CleanWebpackPlugin()</span><br><span class="line">  ],</span><br><span class="line">  mode:&#x27;development&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>修改了上述两处内容后，运行<code>npm run serve</code>运行查看具体效果，发现报错。提示需要loader。使用<code>pnpm i -D ts-loader typescript</code>安装插件。</li><li>安装成功后，进入webpack.config.js中，添加对ts文件的配置。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&quot;path&quot;);</span><br><span class="line">const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;)</span><br><span class="line">const &#123;CleanWebpackPlugin&#125; = require(&#x27;clean-webpack-plugin&#x27;)</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry:&#x27;./src/main.ts&#x27;,</span><br><span class="line">  output:&#123;</span><br><span class="line">    path:path.resolve(__dirname,&#x27;dist&#x27;),</span><br><span class="line">    filename: &quot;main.js&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    &quot;extensions&quot;:[&#x27;.ts&#x27;,&#x27;.js&#x27;,&#x27;.json&#x27;]</span><br><span class="line">  &#125;,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    static:&#x27;/dist&#x27;,</span><br><span class="line">    open:true</span><br><span class="line">  &#125;,</span><br><span class="line">  module:&#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.css$/,</span><br><span class="line">        use:[&#x27;style-loader&#x27;,&#x27;css-loader&#x27;]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test:/\.ts$/,</span><br><span class="line">        use:[&#x27;ts-loader&#x27;],</span><br><span class="line">        exclude: /node_modules/</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: &quot;./src/index.html&quot;,</span><br><span class="line">    &#125;),</span><br><span class="line">    new CleanWebpackPlugin()</span><br><span class="line">  ],</span><br><span class="line">  mode:&#x27;development&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>再次运行webpack，运行成功。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ts </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ts+webpack视频播放器组件（一）</title>
      <link href="/2023/05/28/ts_video/1/"/>
      <url>/2023/05/28/ts_video/1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原视频：<span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXNVNHkxYTdyaQ==">https://www.bilibili.com/video/BV1sU4y1a7ri<i class="fa fa-external-link-alt"></i></span></p></blockquote><blockquote><p>day1-新建文件夹、webpack构建项目</p></blockquote><span id="more"></span><h3 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h3><ol><li><p>先创建项目的配置文件package.json<br>使用<code>npm init -y</code>命令</p></li><li><p>局部安装webpack<br>使用<code>pnpm i -D webpack webpack-cli</code>命令</p></li><li><p>进入项目，新建webpack.config.js文件<br>因为这个文件是一个node文件，所以需要提供对外的接口，使用模块化开发</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">entry:&#x27;&#x27;,</span><br><span class="line">output:&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在项目里新建main.js和测试引入功能用的a.js（a.js后面删掉）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//a.js</span><br><span class="line">let a = &#x27;test&#x27;;</span><br><span class="line">export default a;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//main.js</span><br><span class="line">import a from &#x27;./a.js&#x27;</span><br><span class="line">console.log(a)//会输出test</span><br></pre></td></tr></table></figure></li><li><p>在webpack.config.js的出口对象里添加属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&#x27;path&#x27;)</span><br><span class="line"></span><br><span class="line">module.export = &#123;</span><br><span class="line">entry:&#x27;./src/main.js&#x27;,</span><br><span class="line">output:&#123;</span><br><span class="line">path:path.resolve(__dirname,&#x27;dist&#x27;)//这是nodejs的绝对路径api</span><br><span class="line">filename:&#x27;main.js&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果想运行webpack了，就用对应脚本先构建。而这里因为我们是局部安装，导致会用到全局的webpack。所以这时候需要在package.json里面的脚本里添加一个新的脚本，用来调用默认的局部webpack。在下面的代码中，添加了<code>build</code>去构建。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//package.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;miniplayer&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,</span><br><span class="line">    &quot;build&quot;: &quot;webpack --config webpack.config.js&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;keywords&quot;: [],</span><br><span class="line">  &quot;author&quot;: &quot;&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;webpack&quot;: &quot;^5.84.1&quot;,</span><br><span class="line">    &quot;webpack-cli&quot;: &quot;^5.1.1&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>构建成功之后，去到<code>dist</code>目录下面看构建好的项目。发现main.js中的代码不好阅读。因为我们没有在webpack.config.js里定义他用的模式。需要添加<code>mode</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&quot;path&quot;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry:&#x27;./src/main.js&#x27;,</span><br><span class="line">  output:&#123;</span><br><span class="line">    path:path.resolve(__dirname,&#x27;dist&#x27;),</span><br><span class="line">    filename: &quot;main.js&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  mode:&#x27;development&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>然后为了展示main.js，我们还需要一个index的html文件，在dist目录下新建html文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script src=&quot;./main.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>有了html，我们还需要css样式。创建一个测试用的a.css，然后在main.js中导入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//a.css</span><br><span class="line">body&#123;</span><br><span class="line">  background-color: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//main.js</span><br><span class="line">import aa from &#x27;./a.js&#x27;</span><br><span class="line">import &#x27;./assets/css/a.css&#x27;</span><br><span class="line"></span><br><span class="line">console.log(aa)</span><br></pre></td></tr></table></figure></li><li><p>导入css后，我们再去build时，会报错提示没有对应的loader，这时候需要去cmd里下载对应loader。使用<code>pnpm i -D style-loader css-loader</code></p></li><li><p>下载成功后，就要去webpack.config.js配置对应的模块规则。在module属性添加rules，用正则针对对应的文件，和使用的loader。因为顺序是从右到左，所以应该吧css-loader写在后面，因为loader是解析css，style-loader是把样式放进html中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&quot;path&quot;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry:&#x27;./src/main.js&#x27;,</span><br><span class="line">  output:&#123;</span><br><span class="line">    path:path.resolve(__dirname,&#x27;dist&#x27;),</span><br><span class="line">    filename: &quot;main.js&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  module:&#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.css$/,</span><br><span class="line">        use:[&#x27;style-loader&#x27;,&#x27;css-loader&#x27;]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  mode:&#x27;development&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>dist的html文件是我们自己定义的，为了开发的方便，我们想让webpack可以帮我们生成dist中的html，这时候就需要使用到html-webpack-plugin插件。使用<code>pnpm i -D html-webpack-plugin</code>下载</p></li><li><p>下载成功后，我们先在src里新建一个index.html文件，用来给webpack以此为基础生成dist打包文件的。</p></li><li><p>接着进入webpack.config.js中，对plugins属性进行配置，注意，要先引入html的那个插件<code>const HtmlWebpackPlugin = require(&#39;htem-webpack-plugin&#39;)</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//webpack.config.js</span><br><span class="line">const path = require(&quot;path&quot;);</span><br><span class="line">const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;)</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry:&#x27;./src/main.js&#x27;,</span><br><span class="line">  output:&#123;</span><br><span class="line">    path:path.resolve(__dirname,&#x27;dist&#x27;),</span><br><span class="line">    filename: &quot;main.js&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  module:&#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.css$/,</span><br><span class="line">        use:[&#x27;style-loader&#x27;,&#x27;css-loader&#x27;]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: &quot;./src/index.html&quot;,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  mode:&#x27;development&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>根据个人需求，添加clean-webpack-plugin插件</p></li><li><p>为了让开发时，代码的改变可以实现热更新，我们需要安装webpack-dev-serve，使用<code>pnpm i -D webpack-dev-serve</code>命令安装。</p></li><li><p>安装后在webpack.config.js中的devServer属性进行配置目标目录，并且在package.json脚本中增加新脚本。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">//webpack.config.js</span><br><span class="line">const path = require(&quot;path&quot;);</span><br><span class="line">const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;)</span><br><span class="line">const &#123;CleanWebpackPlugin&#125; = require(&#x27;clean-webpack-plugin&#x27;)</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry:&#x27;./src/main.js&#x27;,</span><br><span class="line">  output:&#123;</span><br><span class="line">    path:path.resolve(__dirname,&#x27;dist&#x27;),</span><br><span class="line">    filename: &quot;main.js&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    static:&#x27;/dist&#x27;,</span><br><span class="line">    open:true</span><br><span class="line">  &#125;,</span><br><span class="line">  module:&#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.css$/,</span><br><span class="line">        use:[&#x27;style-loader&#x27;,&#x27;css-loader&#x27;]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: &quot;./src/index.html&quot;,</span><br><span class="line">    &#125;),</span><br><span class="line">    new CleanWebpackPlugin()</span><br><span class="line">  ],</span><br><span class="line">  mode:&#x27;development&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//package.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;miniplayer&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,</span><br><span class="line">    &quot;build&quot;: &quot;webpack --config webpack.config.js&quot;,</span><br><span class="line">    &quot;serve&quot;: &quot;webpack-dev-server&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;keywords&quot;: [],</span><br><span class="line">  &quot;author&quot;: &quot;&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;clean-webpack-plugin&quot;: &quot;^4.0.0&quot;,</span><br><span class="line">    &quot;css-loader&quot;: &quot;^6.8.1&quot;,</span><br><span class="line">    &quot;html-webpack-plugin&quot;: &quot;^5.5.1&quot;,</span><br><span class="line">    &quot;style-loader&quot;: &quot;^3.3.3&quot;,</span><br><span class="line">    &quot;webpack&quot;: &quot;^5.84.1&quot;,</span><br><span class="line">    &quot;webpack-cli&quot;: &quot;^5.1.1&quot;,</span><br><span class="line">    &quot;webpack-dev-server&quot;: &quot;^4.15.0&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ts </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写call、apply、bind</title>
      <link href="/2023/05/05/bind/"/>
      <url>/2023/05/05/bind/</url>
      
        <content type="html"><![CDATA[<p>本文主要介绍call、apply、bind三者的区别</p><span id="more"></span><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTYyMDM3OTY4MDEzODg1NDQ4I2NvbW1lbnQ=">博客1<i class="fa fa-external-link-alt"></i></span><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MTI4MjMzNTcyMzgwNDQyNjYwI2NvbW1lbnQ=">博客2<i class="fa fa-external-link-alt"></i></span></p><h5 id="先尝试一下call的作用"><a href="#先尝试一下call的作用" class="headerlink" title="先尝试一下call的作用"></a>先尝试一下call的作用</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const A = &#123;</span><br><span class="line">name: &#x27;中国人&#x27;,</span><br><span class="line">say(language) &#123;</span><br><span class="line">console.log(`$&#123;this.name&#125; say $&#123;language&#125;`)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">person.say(&#x27;Chinese&#x27;)// &#x27;中国人 say Chinese&#x27;</span><br></pre></td></tr></table></figure><p>这时候B对象也想使用say方法，就可以用call来借用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const B = &#123;</span><br><span class="line">name:&#x27;日本人&#x27;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">A.say.call(B,&#x27;japanese&#x27;)// &#x27;日本人 say japanese&#x27;</span><br></pre></td></tr></table></figure><p>say里面的this.name本来应该是它自己的’中国人’，但是通过call的第一个参数指定了this改变指向的对象。使this指向了B，得到的’日本人’，除了第一个参数是指向的新对象之外，其后的都是原来say需要的参数。</p><h5 id="call、apply、bind是干嘛的？有什么区别"><a href="#call、apply、bind是干嘛的？有什么区别" class="headerlink" title="call、apply、bind是干嘛的？有什么区别"></a>call、apply、bind是干嘛的？有什么区别</h5><p>这里直接引用大佬博客的原话了<img src="/images/bind/img.png"></p><blockquote><p>call、apply 和 bind，都是用来改变函数的 this 指向的。<br>call、apply 和 bind 之间的区别比较大，前两者在改变 this 指向的同时，也会把目标函数给执行掉；后者则只负责改造 this，不作任何执行操作。<br>call 和 apply 之间的区别，则体现在对入参的要求上。前者只需要将目标函数的入参逐个传入即可，后者则希望入参以数组形式被传入。</p></blockquote><h5 id="实现call、apply、bind"><a href="#实现call、apply、bind" class="headerlink" title="实现call、apply、bind"></a>实现call、apply、bind</h5><ul><li>call<br>观察上文对call的使用，我们先自己写个叫myCall()的方法，然后拿到目标对象定义一个临时属性，把this指向他，最后返回这个临时属性的副本，就删除临时属性。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Function.prototype.myCall = function(target,...args)&#123;</span><br><span class="line">//拿到目标对象target，如果非真值就拿到window</span><br><span class="line">_target = target || window</span><br><span class="line"></span><br><span class="line">//通过Symbol函数生成Symbol值，防止属性名可能（基本不可能）产生冲突</span><br><span class="line">const symbolKey = Symbol()</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">让目标对象的这个symbolKey属性被this指向</span><br><span class="line">因为调用的时候是xxx.say.myCall()，而this指向最后一个调用他的对象，</span><br><span class="line">所以这里this是xxx.say()，所以新的方法就是借用了say()</span><br><span class="line">ps：我的拙见，不知道对不对</span><br><span class="line">*/</span><br><span class="line">_target[symbolKey] = this</span><br><span class="line"></span><br><span class="line">//用res接受借用后的函数，方便后续返回这个临时函数时，可以把他删除不占空间</span><br><span class="line">const res = _target[symbolKey](...args) </span><br><span class="line">delete _target[symbolKey]</span><br><span class="line">return res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>apply<br>apply和call的差别在于携带参数。所以我们只要把myCall的参数的扩展运算符写法换成数组就可以<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Function.prototype.myApply = function(target,args)&#123;</span><br><span class="line">_target = target || window</span><br><span class="line">const symbolKey = Symbol()</span><br><span class="line">_target[symbolKey] = this</span><br><span class="line">const res = _target[symbolKey](...args)</span><br><span class="line">delete _target[symbolKey]</span><br><span class="line">return res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>bind<br>相比上面两个，bind只需要改变this的指向，而不需要执行那个函数。所以我们需要返回一个函数。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Function.prototype.myBind = function(target,...outerArgs)&#123;</span><br><span class="line">    // 处理边界条件</span><br><span class="line">    let _target = target || &#123;&#125; </span><br><span class="line">    const symbolKey = Symbol()</span><br><span class="line">    _target[symbolKey] = this</span><br><span class="line">    // 返回一个函数，innerArg也可以不带，写arguments</span><br><span class="line">    return function F(...innerArgs) &#123; </span><br><span class="line">      if(_target[symbolKey] instanceof F)&#123;</span><br><span class="line">      // new</span><br><span class="line">        return new _target[symbolKey](...outerArgs,...innerArgs)</span><br><span class="line">      &#125;</span><br><span class="line">      // 直接调用</span><br><span class="line">      return  _target[symbolKey].apply(target,[...outerArgs, ...innerArgs])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注册登录界面逻辑</title>
      <link href="/2023/04/21/register-login/"/>
      <url>/2023/04/21/register-login/</url>
      
        <content type="html"><![CDATA[<h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><p>注册界面分为四步骤，填写手机号、图片验证码——-&gt;由手机号和图片验证码获取短信验证码——-&gt;填写短信验证码、密码——-&gt;注册。<br><img src="/images/register&login/img.png"></p><p> 1、如果手机号或未填写，无法获取短信验证码，所以在获取验证码的按钮需要加一层判断，判断手机号和验证码是否为空（输入框自带校验，如果手机号和验证码格式错误），不为空就继续下一步—向后端发送手机号和验证码请求短信。</p><p>2、本地校验通过，点按按钮，判断后端返回的code，验证码错误或是验证码发送过快并提示。本地的发送按钮再进行一个防抖，计时60秒。如果验证码正确，提示已发送，并解除注册按钮的禁用。继续进行下一步。</p><p>3、输入验证码，点击注册，本地判断密码和确认密码是否填写。无误发送请求。判断后端返回code相应进行提示。如果是账号已存在或账号注册成功，清空表单，切换至登录界面。</p><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p>登录功能较为简单，基本的表单校验，点击登陆后判断后端返回的信息，成功则路由跳转，错误则提示’账号或密码错误’</p><p>​</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2FA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue可拖拽列表+点击效果</title>
      <link href="/2023/04/20/drable_list/"/>
      <url>/2023/04/20/drable_list/</url>
      
        <content type="html"><![CDATA[<p>​<br>可拖拽列表是参考这位大佬的<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTA5Mjg3ODA0NTEwMzcxODQ3">基于Vue快速实现列表拖拽排序<i class="fa fa-external-link-alt"></i></span>，在他的基础上添加了点击后的效果，实现一个类似菜单一样的列表，可以拖拽。思路和一般的菜单点击一样，只是从常见的匹配index变成匹配id</p><p><img src="/images/drable_list/img.gif"></p><p>代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;listAll&quot;&gt;</span><br><span class="line">    &lt;transition-group name=&quot;drag&quot; class=&quot;list&quot; tag=&quot;ul&quot;&gt;</span><br><span class="line">      &lt;li</span><br><span class="line">        @dragenter=&quot;dragenter($event, index)&quot;</span><br><span class="line">        @dragover=&quot;dragover($event, index)&quot;</span><br><span class="line">        @dragstart=&quot;dragstart($event,index)&quot;</span><br><span class="line">        draggable=&quot;true&quot;</span><br><span class="line">        v-for=&quot;(item, index) in list&quot;</span><br><span class="line">        :key=&quot;item.title&quot;</span><br><span class="line">        :id=&quot;item.id&quot;</span><br><span class="line">        class=&quot;list-item el-dropdown-menu__item&quot;</span><br><span class="line">        @click=&quot;dataLink(item)&quot;</span><br><span class="line">        :class=&quot;&#123;isactive:dragId===item.id&#125;&quot;</span><br><span class="line">        &gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &#123;&#123; item.title &#125;&#125;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div style=&quot;font-size: 8px&quot;&gt;</span><br><span class="line">          &#123;&#123;item.link_sum&#125;&#125;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/transition-group&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name:&#x27;list&#x27;,</span><br><span class="line">  props:&#123;</span><br><span class="line">    list:[]</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      dragIndex: &quot;&quot;,</span><br><span class="line">      enterIndex: &quot;&quot;,</span><br><span class="line">      dragId:&quot;&quot;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    //关于拖拽的函数</span><br><span class="line">    dragstart(e,index) &#123;</span><br><span class="line">      this.dragIndex = index;</span><br><span class="line">    &#125;,</span><br><span class="line">    dragenter(e, index) &#123;</span><br><span class="line">      e.preventDefault();</span><br><span class="line">      if (this.dragIndex !== index) &#123;</span><br><span class="line">        const moving = this.list[this.dragIndex];</span><br><span class="line">        this.list.splice(this.dragIndex, 1);</span><br><span class="line">        this.list.splice(index, 0, moving);</span><br><span class="line">        this.dragIndex = index;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    dragover(e, index) &#123;</span><br><span class="line">      // this.selectId = this.dragId</span><br><span class="line">      e.preventDefault();</span><br><span class="line">    &#125;,</span><br><span class="line">    dataLink(val)&#123;</span><br><span class="line">      //点击样式</span><br><span class="line">      this.dragId = val.id</span><br><span class="line">      //点了就传给vuex,得到这组数据，数据里有id链接数等等</span><br><span class="line">      this.$store.state.group = val</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.listAll&#123;</span><br><span class="line">  height: 100%;</span><br><span class="line">&#125;</span><br><span class="line">.list &#123;</span><br><span class="line">  margin: 0;</span><br><span class="line">  list-style: none;</span><br><span class="line">  padding-left: 0;</span><br><span class="line">  border: 0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">.drag-move &#123;</span><br><span class="line">  transition: transform 0.3s;</span><br><span class="line">&#125;</span><br><span class="line">.list-item &#123;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">  width:100%;</span><br><span class="line">  line-height: 50px;</span><br><span class="line">  text-align: center;</span><br><span class="line">  padding: 0 !important;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: space-around;</span><br><span class="line">&#125;</span><br><span class="line">.isactive&#123;</span><br><span class="line">  background-color: rgb(236, 245, 255);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>在大佬的代码上修改了一些地方。绑定了<li>的id属性，用点击事件把id记录下来，然后在把匹配当前点击的li的id和存的id。</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python代码封装的可执行exe文件反编译为Py脚本</title>
      <link href="/2022/11/19/python/"/>
      <url>/2022/11/19/python/</url>
      
        <content type="html"><![CDATA[<p>​<br>起因是笔者有个课，教图形图像学，作业的代码调不出老师的效果，于是就又有了hack的想法，把老师给的用来演示的exe文件反编译。主要是根据这篇文章的方法来的。<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNzk0Mzc3L2FydGljbGUvZGV0YWlscy8xMjA2NzM3NDQ=">将 exe 文件反编译成 Python 脚本_py_IA&amp;IM的博客-CSDN博客<i class="fa fa-external-link-alt"></i></span></p><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>首先，在要反编译的exe文件所在路径，新建一个py脚本，然后把下面的代码复制进去，命名随便，记得住就行，比如我这里起名111.py</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">PyInstaller Extractor v1.8 (Supports pyinstaller 3.2, 3.1, 3.0, 2.1, 2.0)</span><br><span class="line">Author : Extreme Coders</span><br><span class="line">E-mail : extremecoders(at)hotmail(dot)com</span><br><span class="line">Web    : https://0xec.blogspot.com</span><br><span class="line">Date   : 28-April-2017</span><br><span class="line">Url    : https://sourceforge.net/projects/pyinstallerextractor/</span><br><span class="line"></span><br><span class="line">For any suggestions, leave a comment on</span><br><span class="line">https://forum.tuts4you.com/topic/34455-pyinstaller-extractor/</span><br><span class="line"></span><br><span class="line">This script extracts a pyinstaller generated executable file.</span><br><span class="line">Pyinstaller installation is not needed. The script has it all.</span><br><span class="line"></span><br><span class="line">For best results, it is recommended to run this script in the</span><br><span class="line">same version of python as was used to create the executable.</span><br><span class="line">This is just to prevent unmarshalling errors(if any) while</span><br><span class="line">extracting the PYZ archive.</span><br><span class="line"></span><br><span class="line">Usage : Just copy this script to the directory where your exe resides</span><br><span class="line">        and run the script with the exe file name as a parameter</span><br><span class="line"></span><br><span class="line">C:\path\to\exe\&gt;python pyinstxtractor.py &lt;filename&gt;</span><br><span class="line">$ /path/to/exe/python pyinstxtractor.py &lt;filename&gt;</span><br><span class="line"></span><br><span class="line">Licensed under GNU General Public License (GPL) v3.</span><br><span class="line">You are free to modify this source.</span><br><span class="line"></span><br><span class="line">CHANGELOG</span><br><span class="line">================================================</span><br><span class="line"></span><br><span class="line">Version 1.1 (Jan 28, 2014)</span><br><span class="line">-------------------------------------------------</span><br><span class="line">- First Release</span><br><span class="line">- Supports only pyinstaller 2.0</span><br><span class="line"></span><br><span class="line">Version 1.2 (Sept 12, 2015)</span><br><span class="line">-------------------------------------------------</span><br><span class="line">- Added support for pyinstaller 2.1 and 3.0 dev</span><br><span class="line">- Cleaned up code</span><br><span class="line">- Script is now more verbose</span><br><span class="line">- Executable extracted within a dedicated sub-directory</span><br><span class="line"></span><br><span class="line">(Support for pyinstaller 3.0 dev is experimental)</span><br><span class="line"></span><br><span class="line">Version 1.3 (Dec 12, 2015)</span><br><span class="line">-------------------------------------------------</span><br><span class="line">- Added support for pyinstaller 3.0 final</span><br><span class="line">- Script is compatible with both python 2.x &amp; 3.x (Thanks to Moritz Kroll @ Avira Operations GmbH &amp; Co. KG)</span><br><span class="line"></span><br><span class="line">Version 1.4 (Jan 19, 2016)</span><br><span class="line">-------------------------------------------------</span><br><span class="line">- Fixed a bug when writing pyc files &gt;= version 3.3 (Thanks to Daniello Alto: https://github.com/Djamana)</span><br><span class="line"></span><br><span class="line">Version 1.5 (March 1, 2016)</span><br><span class="line">-------------------------------------------------</span><br><span class="line">- Added support for pyinstaller 3.1 (Thanks to Berwyn Hoyt for reporting)</span><br><span class="line"></span><br><span class="line">Version 1.6 (Sept 5, 2016)</span><br><span class="line">-------------------------------------------------</span><br><span class="line">- Added support for pyinstaller 3.2</span><br><span class="line">- Extractor will use a random name while extracting unnamed files.</span><br><span class="line">- For encrypted pyz archives it will dump the contents as is. Previously, the tool would fail.</span><br><span class="line"></span><br><span class="line">Version 1.7 (March 13, 2017)</span><br><span class="line">-------------------------------------------------</span><br><span class="line">- Made the script compatible with python 2.6 (Thanks to Ross for reporting)</span><br><span class="line"></span><br><span class="line">Version 1.8 (April 28, 2017)</span><br><span class="line">-------------------------------------------------</span><br><span class="line">- Support for sub-directories in .pyz files (Thanks to Moritz Kroll @ Avira Operations GmbH &amp; Co. KG)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">Author: In Ming Loh</span><br><span class="line">Email: inming.loh@countercept.com</span><br><span class="line"></span><br><span class="line">Changes have been made to Version 1.8 (April 28, 2017).</span><br><span class="line"></span><br><span class="line">CHANGELOG</span><br><span class="line">================================================</span><br><span class="line">- Function extractFiles(self, custom_dir=None) has been modfied to allow custom output directory.</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">import os</span><br><span class="line">import struct</span><br><span class="line">import marshal</span><br><span class="line">import zlib</span><br><span class="line">import sys</span><br><span class="line">import imp</span><br><span class="line">import types</span><br><span class="line">from uuid import uuid4 as uniquename</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class CTOCEntry:</span><br><span class="line">    def __init__(self, position, cmprsdDataSize, uncmprsdDataSize, cmprsFlag, typeCmprsData, name):</span><br><span class="line">        self.position = position</span><br><span class="line">        self.cmprsdDataSize = cmprsdDataSize</span><br><span class="line">        self.uncmprsdDataSize = uncmprsdDataSize</span><br><span class="line">        self.cmprsFlag = cmprsFlag</span><br><span class="line">        self.typeCmprsData = typeCmprsData</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class PyInstArchive:</span><br><span class="line">    PYINST20_COOKIE_SIZE = 24           # For pyinstaller 2.0</span><br><span class="line">    PYINST21_COOKIE_SIZE = 24 + 64      # For pyinstaller 2.1+</span><br><span class="line">    MAGIC = b&#x27;MEI\014\013\012\013\016&#x27;  # Magic number which identifies pyinstaller</span><br><span class="line"></span><br><span class="line">    def __init__(self, path):</span><br><span class="line">        self.filePath = path</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def open(self):</span><br><span class="line">        try:</span><br><span class="line">            self.fPtr = open(self.filePath, &#x27;rb&#x27;)</span><br><span class="line">            self.fileSize = os.stat(self.filePath).st_size</span><br><span class="line">        except:</span><br><span class="line">            print(&#x27;[*] Error: Could not open &#123;0&#125;&#x27;.format(self.filePath))</span><br><span class="line">            return False</span><br><span class="line">        return True</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def close(self):</span><br><span class="line">        try:</span><br><span class="line">            self.fPtr.close()</span><br><span class="line">        except:</span><br><span class="line">            pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def checkFile(self):</span><br><span class="line">        print(&#x27;[*] Processing &#123;0&#125;&#x27;.format(self.filePath))</span><br><span class="line">        # Check if it is a 2.0 archive</span><br><span class="line">        self.fPtr.seek(self.fileSize - self.PYINST20_COOKIE_SIZE, os.SEEK_SET)</span><br><span class="line">        magicFromFile = self.fPtr.read(len(self.MAGIC))</span><br><span class="line"></span><br><span class="line">        if magicFromFile == self.MAGIC:</span><br><span class="line">            self.pyinstVer = 20     # pyinstaller 2.0</span><br><span class="line">            print(&#x27;[*] Pyinstaller version: 2.0&#x27;)</span><br><span class="line">            return True</span><br><span class="line"></span><br><span class="line">        # Check for pyinstaller 2.1+ before bailing out</span><br><span class="line">        self.fPtr.seek(self.fileSize - self.PYINST21_COOKIE_SIZE, os.SEEK_SET)</span><br><span class="line">        magicFromFile = self.fPtr.read(len(self.MAGIC))</span><br><span class="line"></span><br><span class="line">        if magicFromFile == self.MAGIC:</span><br><span class="line">            print(&#x27;[*] Pyinstaller version: 2.1+&#x27;)</span><br><span class="line">            self.pyinstVer = 21     # pyinstaller 2.1+</span><br><span class="line">            return True</span><br><span class="line"></span><br><span class="line">        print(&#x27;[*] Error : Unsupported pyinstaller version or not a pyinstaller archive&#x27;)</span><br><span class="line">        return False</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def getCArchiveInfo(self):</span><br><span class="line">        try:</span><br><span class="line">            if self.pyinstVer == 20:</span><br><span class="line">                self.fPtr.seek(self.fileSize - self.PYINST20_COOKIE_SIZE, os.SEEK_SET)</span><br><span class="line"></span><br><span class="line">                # Read CArchive cookie</span><br><span class="line">                (magic, lengthofPackage, toc, tocLen, self.pyver) = \</span><br><span class="line">                struct.unpack(&#x27;!8siiii&#x27;, self.fPtr.read(self.PYINST20_COOKIE_SIZE))</span><br><span class="line"></span><br><span class="line">            elif self.pyinstVer == 21:</span><br><span class="line">                self.fPtr.seek(self.fileSize - self.PYINST21_COOKIE_SIZE, os.SEEK_SET)</span><br><span class="line"></span><br><span class="line">                # Read CArchive cookie</span><br><span class="line">                (magic, lengthofPackage, toc, tocLen, self.pyver, pylibname) = \</span><br><span class="line">                struct.unpack(&#x27;!8siiii64s&#x27;, self.fPtr.read(self.PYINST21_COOKIE_SIZE))</span><br><span class="line"></span><br><span class="line">        except:</span><br><span class="line">            print(&#x27;[*] Error : The file is not a pyinstaller archive&#x27;)</span><br><span class="line">            return False</span><br><span class="line"></span><br><span class="line">        print(&#x27;[*] Python version: &#123;0&#125;&#x27;.format(self.pyver))</span><br><span class="line"></span><br><span class="line">        # Overlay is the data appended at the end of the PE</span><br><span class="line">        self.overlaySize = lengthofPackage</span><br><span class="line">        self.overlayPos = self.fileSize - self.overlaySize</span><br><span class="line">        self.tableOfContentsPos = self.overlayPos + toc</span><br><span class="line">        self.tableOfContentsSize = tocLen</span><br><span class="line"></span><br><span class="line">        print(&#x27;[*] Length of package: &#123;0&#125; bytes&#x27;.format(self.overlaySize))</span><br><span class="line">        return True</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def parseTOC(self):</span><br><span class="line">        # Go to the table of contents</span><br><span class="line">        self.fPtr.seek(self.tableOfContentsPos, os.SEEK_SET)</span><br><span class="line"></span><br><span class="line">        self.tocList = []</span><br><span class="line">        parsedLen = 0</span><br><span class="line"></span><br><span class="line">        # Parse table of contents</span><br><span class="line">        while parsedLen &lt; self.tableOfContentsSize:</span><br><span class="line">            (entrySize, ) = struct.unpack(&#x27;!i&#x27;, self.fPtr.read(4))</span><br><span class="line">            nameLen = struct.calcsize(&#x27;!iiiiBc&#x27;)</span><br><span class="line"></span><br><span class="line">            (entryPos, cmprsdDataSize, uncmprsdDataSize, cmprsFlag, typeCmprsData, name) = \</span><br><span class="line">            struct.unpack( \</span><br><span class="line">                &#x27;!iiiBc&#123;0&#125;s&#x27;.format(entrySize - nameLen), \</span><br><span class="line">                self.fPtr.read(entrySize - 4))</span><br><span class="line"></span><br><span class="line">            name = name.decode(&#x27;utf-8&#x27;).rstrip(&#x27;\0&#x27;)</span><br><span class="line">            if len(name) == 0:</span><br><span class="line">                name = str(uniquename())</span><br><span class="line">                print(&#x27;[!] Warning: Found an unamed file in CArchive. Using random name &#123;0&#125;&#x27;.format(name))</span><br><span class="line"></span><br><span class="line">            self.tocList.append( \</span><br><span class="line">                                CTOCEntry(                      \</span><br><span class="line">                                    self.overlayPos + entryPos, \</span><br><span class="line">                                    cmprsdDataSize,             \</span><br><span class="line">                                    uncmprsdDataSize,           \</span><br><span class="line">                                    cmprsFlag,                  \</span><br><span class="line">                                    typeCmprsData,              \</span><br><span class="line">                                    name                        \</span><br><span class="line">                                ))</span><br><span class="line"></span><br><span class="line">            parsedLen += entrySize</span><br><span class="line">        print(&#x27;[*] Found &#123;0&#125; files in CArchive&#x27;.format(len(self.tocList)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def extractFiles(self, custom_dir=None):</span><br><span class="line">        print(&#x27;[*] Beginning extraction...please standby&#x27;)</span><br><span class="line">        if custom_dir is None:</span><br><span class="line">            extractionDir = os.path.join(os.getcwd(), os.path.basename(self.filePath) + &#x27;_extracted&#x27;)</span><br><span class="line"></span><br><span class="line">            if not os.path.exists(extractionDir):</span><br><span class="line">                os.mkdir(extractionDir)</span><br><span class="line"></span><br><span class="line">            os.chdir(extractionDir)</span><br><span class="line">        else:</span><br><span class="line">            if not os.path.exists(custom_dir):</span><br><span class="line">                os.makedirs(custom_dir)</span><br><span class="line">            os.chdir(custom_dir)</span><br><span class="line"></span><br><span class="line">        for entry in self.tocList:</span><br><span class="line">            basePath = os.path.dirname(entry.name)</span><br><span class="line">            if basePath != &#x27;&#x27;:</span><br><span class="line">                # Check if path exists, create if not</span><br><span class="line">                if not os.path.exists(basePath):</span><br><span class="line">                    os.makedirs(basePath)</span><br><span class="line"></span><br><span class="line">            self.fPtr.seek(entry.position, os.SEEK_SET)</span><br><span class="line">            data = self.fPtr.read(entry.cmprsdDataSize)</span><br><span class="line"></span><br><span class="line">            if entry.cmprsFlag == 1:</span><br><span class="line">                data = zlib.decompress(data)</span><br><span class="line">                # Malware may tamper with the uncompressed size</span><br><span class="line">                # Comment out the assertion in such a case</span><br><span class="line">                assert len(data) == entry.uncmprsdDataSize # Sanity Check</span><br><span class="line"></span><br><span class="line">            with open(entry.name, &#x27;wb&#x27;) as f:</span><br><span class="line">                f.write(data)</span><br><span class="line"></span><br><span class="line">            if entry.typeCmprsData == b&#x27;z&#x27;:</span><br><span class="line">                self._extractPyz(entry.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def _extractPyz(self, name):</span><br><span class="line">        dirName =  name + &#x27;_extracted&#x27;</span><br><span class="line">        # Create a directory for the contents of the pyz</span><br><span class="line">        if not os.path.exists(dirName):</span><br><span class="line">            os.mkdir(dirName)</span><br><span class="line"></span><br><span class="line">        with open(name, &#x27;rb&#x27;) as f:</span><br><span class="line">            pyzMagic = f.read(4)</span><br><span class="line">            assert pyzMagic == b&#x27;PYZ\0&#x27; # Sanity Check</span><br><span class="line"></span><br><span class="line">            pycHeader = f.read(4) # Python magic value</span><br><span class="line"></span><br><span class="line">            if imp.get_magic() != pycHeader:</span><br><span class="line">                print(&#x27;[!] Warning: The script is running in a different python version than the one used to build the executable&#x27;)</span><br><span class="line">                print(&#x27;    Run this script in Python&#123;0&#125; to prevent extraction errors(if any) during unmarshalling&#x27;.format(self.pyver))</span><br><span class="line"></span><br><span class="line">            (tocPosition, ) = struct.unpack(&#x27;!i&#x27;, f.read(4))</span><br><span class="line">            f.seek(tocPosition, os.SEEK_SET)</span><br><span class="line"></span><br><span class="line">            try:</span><br><span class="line">                toc = marshal.load(f)</span><br><span class="line">            except:</span><br><span class="line">                print(&#x27;[!] Unmarshalling FAILED. Cannot extract &#123;0&#125;. Extracting remaining files.&#x27;.format(name))</span><br><span class="line">                return</span><br><span class="line"></span><br><span class="line">            print(&#x27;[*] Found &#123;0&#125; files in PYZ archive&#x27;.format(len(toc)))</span><br><span class="line"></span><br><span class="line">            # From pyinstaller 3.1+ toc is a list of tuples</span><br><span class="line">            if type(toc) == list:</span><br><span class="line">                toc = dict(toc)</span><br><span class="line"></span><br><span class="line">            for key in toc.keys():</span><br><span class="line">                (ispkg, pos, length) = toc[key]</span><br><span class="line">                f.seek(pos, os.SEEK_SET)</span><br><span class="line"></span><br><span class="line">                fileName = key</span><br><span class="line">                try:</span><br><span class="line">                    # for Python &gt; 3.3 some keys are bytes object some are str object</span><br><span class="line">                    fileName = key.decode(&#x27;utf-8&#x27;)</span><br><span class="line">                except:</span><br><span class="line">                    pass</span><br><span class="line"></span><br><span class="line">                # Make sure destination directory exists, ensuring we keep inside dirName</span><br><span class="line">                destName = os.path.join(dirName, fileName.replace(&quot;..&quot;, &quot;__&quot;))</span><br><span class="line">                destDirName = os.path.dirname(destName)</span><br><span class="line">                if not os.path.exists(destDirName):</span><br><span class="line">                    os.makedirs(destDirName)</span><br><span class="line"></span><br><span class="line">                try:</span><br><span class="line">                    data = f.read(length)</span><br><span class="line">                    data = zlib.decompress(data)</span><br><span class="line">                except:</span><br><span class="line">                    print(&#x27;[!] Error: Failed to decompress &#123;0&#125;, probably encrypted. Extracting as is.&#x27;.format(fileName))</span><br><span class="line">                    open(destName + &#x27;.pyc.encrypted&#x27;, &#x27;wb&#x27;).write(data)</span><br><span class="line">                    continue</span><br><span class="line"></span><br><span class="line">                with open(destName + &#x27;.pyc&#x27;, &#x27;wb&#x27;) as pycFile:</span><br><span class="line">                    pycFile.write(pycHeader)      # Write pyc magic</span><br><span class="line">                    pycFile.write(b&#x27;\0&#x27; * 4)      # Write timestamp</span><br><span class="line">                    if self.pyver &gt;= 33:</span><br><span class="line">                        pycFile.write(b&#x27;\0&#x27; * 4)  # Size parameter added in Python 3.3</span><br><span class="line">                    pycFile.write(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    if len(sys.argv) &lt; 2:</span><br><span class="line">        print(&#x27;[*] Usage: pyinstxtractor.py &lt;filename&gt;&#x27;)</span><br><span class="line"></span><br><span class="line">    else:</span><br><span class="line">        arch = PyInstArchive(sys.argv[1])</span><br><span class="line">        if arch.open():</span><br><span class="line">            if arch.checkFile():</span><br><span class="line">                if arch.getCArchiveInfo():</span><br><span class="line">                    arch.parseTOC()</span><br><span class="line">                    arch.extractFiles()</span><br><span class="line">                    arch.close()</span><br><span class="line">                    print(&#x27;[*] Successfully extracted pyinstaller archive: &#123;0&#125;&#x27;.format(sys.argv[1]))</span><br><span class="line">                    print(&#x27;&#x27;)</span><br><span class="line">                    print(&#x27;You can now use a python decompiler on the pyc files within the extracted directory&#x27;)</span><br><span class="line">                    return</span><br><span class="line"></span><br><span class="line">            arch.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>然后在exe所在路径cmd，执行下面这个格式的命令</p><blockquote><p>Python 脚本名 要反编译的exe</p></blockquote><p>例如我的脚本命名111.py，需要编译jiqiren.exe，如下图所示<br><img src="/images/python/img1.png"></p><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p><img src="/images/python/img2.png"><br>执行上面的命令之后，结果如下图所示，并且当前路径出现一个文件夹【jiqiren.exe_extracted】<br>进入这个文件夹，找到jiqiren这个文件，定义文件类型为.pyc<br><img src="/images/python/img3.png"></p><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>安装uncompyle6库，命令行运行安装</p><p><code>pip install uncompyle6</code></p><p>然后在刚刚.pyc的路径cmd执行以下命令，把这个pyc反编译为jiqirenceshi1.py</p><p><code>uncompyle6 jiqiren.pyc&gt;jiqirenceshi1.py</code></p><p>然后有的人可能，编译出来就不对了，如下图。那就要多一步了。<br><img src="/images/python/img4.png"></p><h3 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h3><p>用UltraEdit32修改以下刚刚的pyc文件。打开之后是这样<br> 然后如下图步骤<br><img src="/images/python/img5.png"><br>走完上图步骤之后，第一行变成一堆20 20 20…..，把前面四个，改成42 0D 0D 0A，然后保存，再做一次文章的第三步，就上面那个uncompyle6那一步，就反编译好了，不过如果文件里面有中文，中文会变成问号。<br><img src="/images/python/img6.png"></p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
